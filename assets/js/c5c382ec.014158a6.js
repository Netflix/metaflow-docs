"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2414],{8658:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(7462),o=(n(7294),n(3905)),r=n(2004);const s={},i="Advanced Custom Decorators",l={unversionedId:"metaflow/composing-flows/advanced-custom-decorators",id:"metaflow/composing-flows/advanced-custom-decorators",title:"Advanced Custom Decorators",description:"In addition to running logic before and after user code (as shown on",source:"@site/docs/metaflow/composing-flows/advanced-custom-decorators.md",sourceDirName:"metaflow/composing-flows",slug:"/metaflow/composing-flows/advanced-custom-decorators",permalink:"/metaflow/composing-flows/advanced-custom-decorators",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/composing-flows/advanced-custom-decorators.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Custom Decorators",permalink:"/metaflow/composing-flows/custom-decorators"},next:{title:"Applying Decorators with Mutators",permalink:"/metaflow/composing-flows/mutators"}},p={},c=[{value:"Catching failures in the user code",id:"catching-failures-in-the-user-code",level:2},{value:"Skipping the user code",id:"skipping-the-user-code",level:2},{value:"Replacing the user code",id:"replacing-the-user-code",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"advanced-custom-decorators"},"Advanced Custom Decorators"),(0,o.kt)("p",null,"In addition to running logic before and after user code (as shown on\n",(0,o.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/custom-decorators"},"the previous page"),"), a decorator can\noverride the ",(0,o.kt)("inlineCode",{parentName:"p"},"@step")," code entirely, executing alternative logic in its place.\nOr, a decorator can take action if the user code fails."),(0,o.kt)("h2",{id:"catching-failures-in-the-user-code"},"Catching failures in the user code"),(0,o.kt)("p",null,"A decorator can catch failures in the user code by wrapping ",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," in a ",(0,o.kt)("inlineCode",{parentName:"p"},"try"),"-",(0,o.kt)("inlineCode",{parentName:"p"},"except")," block. The\nfollowing example shows the pattern in action, capturing any exceptions in the user code, and asking ChatGPT for\nadvice how to fix it. Save the module to ",(0,o.kt)("inlineCode",{parentName:"p"},"ai_debug.py"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport inspect\nimport traceback\n\nfrom metaflow import user_step_decorator\n\nPROMPT = """\nI have a Metaflow step that is defined as follows:\n\n{source}\n\nIt raised the following exception:\n\n{stack_trace}\n\nProvide suggestions how to fix it.\n"""\n\n@user_step_decorator\ndef ai_debug(step_name, flow, inputs=None, attributes=None):\n    source = inspect.getsource(getattr(flow, step_name))\n    try:\n        yield\n    except:\n        print("\u274c Step failed:")\n        stack_trace = traceback.format_exc()\n        prompt_gpt(PROMPT.format(source=source, stack_trace=stack_trace))\n        raise\n\ndef prompt_gpt(prompt):\n    import requests\n    OPENAI_API_KEY = os.environ.get(\'OPENAI_API_KEY\')\n    if OPENAI_API_KEY:\n        print("\ud83e\udde0 Asking AI for help..")\n        url = "https://api.openai.com/v1/chat/completions"\n        headers = {\n            "Authorization": f"Bearer {OPENAI_API_KEY}",\n            "Content-Type": "application/json"\n        }\n        data = {\n            "model": "gpt-4",\n            "messages": [{"role": "user", "content": prompt}]\n        }\n        response = requests.post(url, headers=headers, json=data)\n        resp = response.json()["choices"][0]["message"]["content"]\n        print(f"\ud83e\udde0\ud83d\udca1 AI suggestion:\\n\\n{resp}")\n    else:\n        print("Specify OPENAI_API_KEY for debugging help")\n')),(0,o.kt)("p",null,"You can test the decorator e.g. with this flow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import math\nfrom metaflow import FlowSpec, step\n\nfrom ai_debug import ai_debug\n\nclass FailFlow(FlowSpec):\n\n    @ai_debug\n    @step\n    def start(self):\n        x = 3\n        for i in range(5):\n            math.sqrt(x - i)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    FailFlow()\n")),(0,o.kt)("p",null,"Set your OpenAI API key in an environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"OPENAI_API_KEY")," and run the flow. The results are impressive:"),(0,o.kt)(r.Z,{controls:!0,muted:!0,playsinline:!0,url:"/assets/ai_debug.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,o.kt)("h2",{id:"skipping-the-user-code"},"Skipping the user code"),(0,o.kt)("p",null,"A decorator can decide to skip execution of the user code by yielding an empty dictionary, i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"yield {}"),". Even when\nskipping the user code a task is started - to execute the custom decorator - but the task is finished right after the\ndecorator finishes."),(0,o.kt)("p",null,"The following example leverages the feature to implement a ",(0,o.kt)("inlineCode",{parentName:"p"},"@memoize")," decorator that reuses past results, skipping\nredundant recomputation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import os\nfrom metaflow import Flow, user_step_decorator, current\n\n@user_step_decorator\ndef memoize(step_name, flow, inputs=None, attributes=None):\n    artifact = attributes[\'artifact\']\n    reset = attributes.get(\'reset\')\n    if reset and getattr(flow, reset, False):\n        print("\u2699\ufe0f memoized results disabled - running the step")\n        yield\n    else:\n        try:\n            run = Flow(current.flow_name).latest_successful_run\n            previous_value = run[step_name].task[artifact].data\n        except:\n            print("\u2699\ufe0f previous results not found - running the step")\n            yield\n        else:\n            print(f"\u2705 reusing results from a previous run {run.id}")\n            setattr(flow, artifact, previous_value)\n            yield {}\n')),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"Flow")," adheres to ",(0,o.kt)("a",{parentName:"p",href:"/scaling/tagging"},"Metaflow namespaces"),", so ",(0,o.kt)("inlineCode",{parentName:"p"},"@memoize")," can be used safely by many\nconcurrent users and production runs, without intermixing results."),(0,o.kt)("p",null,"The following flow utilizes ",(0,o.kt)("inlineCode",{parentName:"p"},"@memoize")," to skip downloading of data and recomputation of taxi fares in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"compute_fare")," step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, Parameter, pypi\n\nfrom memoize import memoize\n\nURL = 'https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2020-01.parquet'\n\nclass ComputeTotalFare(FlowSpec):\n\n    reset = Parameter('reset', default=False, is_flag=True)\n    url = Parameter('url', default=URL)\n\n    @step\n    def start(self):\n        self.next(self.compute_fare)\n\n    @memoize(artifact='total_fare', reset='reset')\n    @pypi(packages={'duckdb': '1.3.2'})\n    @step\n    def compute_fare(self):\n        import duckdb\n        SQL = f\"SELECT SUM(fare_amount) AS total_fare FROM '{self.url}'\"\n        self.total_fare = duckdb.query(SQL).fetchone()[0]\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(f\"Total taxi fares: ${self.total_fare}\")\n\nif __name__ == '__main__':\n    ComputeTotalFare()\n")),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"--reset")," flag to force recomputation of results."),(0,o.kt)("h2",{id:"replacing-the-user-code"},"Replacing the user code"),(0,o.kt)("p",null,"A decorator may decide to execute another function instead of the step function defined in the flow - just\n",(0,o.kt)("inlineCode",{parentName:"p"},"yield")," a callable that takes a ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowSpec")," object (",(0,o.kt)("inlineCode",{parentName:"p"},"self")," in steps) as an argument. "),(0,o.kt)("p",null,"The following example implements a ",(0,o.kt)("inlineCode",{parentName:"p"},"@fallback")," decorator that first attempts to run the user code and if it\nfails - ",(0,o.kt)("inlineCode",{parentName:"p"},"current.retry_count > 0")," - it executes a fallback function instead of re-executing the user code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import user_step_decorator, current\n\n@user_step_decorator\ndef fallback(step_name, flow, inputs=None, attributes=None):\n    def _fallback_step(self):\n        print(\"\ud83d\udedf step failed: executing a fallback\")\n        var = attributes.get('indicator')\n        if var:\n            setattr(self, var, True)\n\n    if current.retry_count == 0:\n        yield\n    else:\n        yield _fallback_step\n")),(0,o.kt)("p",null,"If you pass an attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"indicator")," to the decorator, it stores a corresponding artifact indicating that the\nstep failed. You can test the decorator with the ",(0,o.kt)("inlineCode",{parentName:"p"},"FailFlow")," above. Note that you need to apply ",(0,o.kt)("a",{parentName:"p",href:"/scaling/failures#retrying-tasks-with-the-retry-decorator"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"@retry"),"\ndecorator")," to enable retries:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python failflow.py run --with retry --with fallback.fallback:indicator=failed\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The fallback function cannot modify the flow\u2019s control logic - it cannot change the target of\na ",(0,o.kt)("inlineCode",{parentName:"p"},"self.next")," call. The overall flow structure remains unchanged, even when a fallback\nfunction is used.")))}u.isMDXComponent=!0}}]);