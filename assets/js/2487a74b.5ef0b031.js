"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6553],{8630:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var t=a(7462),i=(a(7294),a(3905)),o=a(2004);const s={},l="Managing Libraries",r={unversionedId:"scaling/dependencies/libraries",id:"scaling/dependencies/libraries",title:"Managing Libraries",description:"Whereas the previous page covered [packaging of your own Python modules and",source:"@site/docs/scaling/dependencies/libraries.md",sourceDirName:"scaling/dependencies",slug:"/scaling/dependencies/libraries",permalink:"/scaling/dependencies/libraries",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/dependencies/libraries.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Structuring Projects",permalink:"/scaling/dependencies/project-structure"},next:{title:"Using uv",permalink:"/scaling/dependencies/uv"}},p={},d=[{value:"The <code>@pypi</code> and <code>@conda</code> decorators",id:"the-pypi-and-conda-decorators",level:2},{value:"Bleeding edge versions of the decorators",id:"bleeding-edge-versions-of-the-decorators",level:3},{value:"<code>@pypi</code> in action",id:"pypi-in-action",level:2},{value:"<code>@conda</code> in action",id:"conda-in-action",level:2},{value:"Using the same packages in all steps",id:"using-the-same-packages-in-all-steps",level:2},{value:"Libraries in remote tasks",id:"libraries-in-remote-tasks",level:2},{value:"Libraries in production deployments",id:"libraries-in-production-deployments",level:2},{value:"Disabling environments",id:"disabling-environments",level:2}],c={toc:d};function m(e){let{components:n,...a}=e;return(0,i.kt)("wrapper",(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"managing-libraries"},"Managing Libraries"),(0,i.kt)("p",null,"Whereas the previous page covered ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"packaging of your own Python modules and\npackages"),", this page covers handling\nof 3rd party dependencies that are published as installable Python packages."),(0,i.kt)("p",null,"Metaflow supports installation of external packages from two Python package\nrepositories: ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/"},"PyPI")," and ",(0,i.kt)("a",{parentName:"p",href:"https://conda-forge.org/"},"Conda")," - learn\nmore about their relative benefits in ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/conda-vs-pypi"},"Conda vs. PyPI"),".\nYou can access these package repositories using ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),"\ndecorators, or you can use ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/astral-sh/uv"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"uv")," package manager"),"\nto manage PyPI dependencies in a Metaflow project similar to any other Python project."),(0,i.kt)("p",null,"Currently, the ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators provide the strongest guarantees\non stability, scalability, and reproducibility of environments, as they snapshot\nall dependencies in the object store, as described in\n",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/internals"},"Packaging Internals"),". Also, they allow\neach step to specify a separate set of dependencies. However, you can get started\neasily with ",(0,i.kt)("inlineCode",{parentName:"p"},"uv")," - in particular if you are already using it for other Python projects."),(0,i.kt)("p",null,"This page focuses on the Metaflow's ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators. If you want to\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"uv")," instead, see ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/uv"},"using ",(0,i.kt)("inlineCode",{parentName:"a"},"uv")),"."),(0,i.kt)("h2",{id:"the-pypi-and-conda-decorators"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"h2"},"@conda")," decorators"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators allow you to make arbitrary packages\navailable to Metaflow steps, as if you were installing them manually with\n",(0,i.kt)("inlineCode",{parentName:"p"},"pip install")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"conda install"),". This functionality works in conjuction\nwith ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"local code packaging"),", so\nsteps can execute in safely isolated, remote-execution friendly environments\nthat contain all dependencies they need."),(0,i.kt)("p",null,"Crucially, when using ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," steps can ",(0,i.kt)("strong",{parentName:"p"},"only")," access packages\nthat are explicitly included either in the code package or specified in the\ndecorator. System-wide packages are not available by design, making sure that\nall dependencies are explicitly specified and managed, ensuring\nreproducibility and stability of the flow."),(0,i.kt)("p",null,"All examples below work interchangeably with ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),". The\nexamples include both ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," lines as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," lines commented out,\nso you can easily test both the decorators. In a real-life setting, you\nwould ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/conda-vs-pypi"},"use either ",(0,i.kt)("inlineCode",{parentName:"a"},"@conda")," or ",(0,i.kt)("inlineCode",{parentName:"a"},"@pypi")),"."),(0,i.kt)("h3",{id:"bleeding-edge-versions-of-the-decorators"},"Bleeding edge versions of the decorators"),(0,i.kt)("p",null,"The default ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators provide basic functionality\nthat covers typical use cases. If you want to use more advanced features\nthat are not included in the default decorators yet, you can use\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-nflx-extensions"},"Netflix's Metaflow extensions"),".\nThese decorators are fully compatible with the built-in\n",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," but provide several additional features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Named environments which enables you easy environment saving and sharing."),(0,i.kt)("li",{parentName:"ul"},"A more full-fledged ",(0,i.kt)("inlineCode",{parentName:"li"},"environment")," command allowing you to resolve environments\nusing external ",(0,i.kt)("inlineCode",{parentName:"li"},"requirements.txt")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"environment.yml")," files as well as\ninspect and rehydrate environments used in any previously run step."),(0,i.kt)("li",{parentName:"ul"},"More extensive package support: You can mix and match Conda and Pypi packages, more\ntypes of Pypi packages, etc.)."),(0,i.kt)("li",{parentName:"ul"},"It is generally more efficient with caching and resolving and provides options\nfor faster performance.")),(0,i.kt)("p",null,"To use, simply install ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/metaflow-netflixext/"},"this package"),".\nDocumentation can be found\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-nflx-extensions/blob/main/docs/conda.md"},"here"),".\nLet us know on the ",(0,i.kt)("a",{parentName:"p",href:"http://slack.outerbounds.co"},"Metaflow community Slack")," if you\nfind these additional features useful!"),(0,i.kt)("h2",{id:"pypi-in-action"},(0,i.kt)("inlineCode",{parentName:"h2"},"@pypi")," in action"),(0,i.kt)("p",null,"This example demonstrates typical use of ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),"). Save the flow as ",(0,i.kt)("inlineCode",{parentName:"p"},"fractalflow.py"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, card, pypi, step, current\nfrom metaflow.cards import Image\n\nclass FractalFlow(FlowSpec):\n\n    @step\n    def start(self):\n        self.next(self.plot)\n\n    @pypi(python='3.9.13',\n          packages={'pyfracgen': '0.0.11',\n                    'matplotlib': '3.8.0'})\n    @card(type='blank')\n    @step\n    def plot(self):\n        # pylint: disable=import-error,no-member\n        import pyfracgen as pf\n        from matplotlib import pyplot as plt\n\n        string = \"AAAAAABBBBBB\"\n        xbound = (2.5, 3.4)\n        ybound = (3.4, 4.0)\n        res = pf.lyapunov(\n            string, xbound, ybound, width=4, height=3,\n            dpi=300, ninit=2000, niter=2000\n        )\n        pf.images.markus_lyapunov_image(res, plt.cm.bone, plt.cm.bone_r, gammas=(8, 1))\n        current.card.append(Image.from_matplotlib(plt.gcf()))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    FractalFlow()\n")),(0,i.kt)("p",null,"Note the following details in the flow:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We use the ",(0,i.kt)("inlineCode",{parentName:"li"},"@pypi")," decorator to make two additional libraries, ",(0,i.kt)("inlineCode",{parentName:"li"},"pyfracgen")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"matplotlib"),",\nas well as their transitive dependencies available in the ",(0,i.kt)("inlineCode",{parentName:"li"},"plot")," step."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"@pypi")," decorator requires that we specify the explicit versions of packages we want\nto import. This ensures that the code executes predictably even when the packages change\nover time."),(0,i.kt)("li",{parentName:"ul"},"We specify the Python version. Some packages containing non-Python code don't work with\nall Python versions, so fixing the Python version ensures reproducibility. Your colleague\nmay use a different version than what you have installed locally."),(0,i.kt)("li",{parentName:"ul"},"We ",(0,i.kt)("inlineCode",{parentName:"li"},"import")," the packages inside the ",(0,i.kt)("inlineCode",{parentName:"li"},"plot")," step and not at the top of the file. The packages\nare only available in this step, so importing at the top level wouldn't work."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"pylint")," checker may get confused about packages that are not installed system-wide.\nThe ",(0,i.kt)("inlineCode",{parentName:"li"},"# pylint: ")," comment addresses the false alerts.")),(0,i.kt)("p",null,"All these points apply to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorator as well."),(0,i.kt)("p",null,"Execute the flow as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python fractalflow.py --environment=pypi run\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment=pypi")," option which ensures that every step gets its own isolated environment.\nThis option is required whenever you use ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorators."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment")," option comes right after the Python file name, not after ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),"\nor other commands.")),(0,i.kt)("p",null,"When you execute the flow for the first time, the environments need to be resolved which can\ntake several minutes (see ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"Internals")," for more details).\nSubsequent runs will start much faster as cached environments will be available."),(0,i.kt)("p",null,"This short clip shows a run in action, showing also a resulting card:"),(0,i.kt)(o.Z,{playsinline:!0,playing:!0,controls:!0,muted:!0,loop:!0,url:"/assets/fractalflow.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}),(0,i.kt)("h2",{id:"conda-in-action"},(0,i.kt)("inlineCode",{parentName:"h2"},"@conda")," in action"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," decorator works similarly to ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi"),". It supports the same ",(0,i.kt)("inlineCode",{parentName:"p"},"python")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"packages"),"\narguments. For backwards compatibility, ",(0,i.kt)("inlineCode",{parentName:"p"},"libraries")," works as an alias for ",(0,i.kt)("inlineCode",{parentName:"p"},"packages"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, conda, card\n\nclass ScikitFlow(FlowSpec):\n\n    @conda(python='3.9.13',\n           packages={'scikit-learn': '1.3.1'})\n    @card\n    @step\n    def start(self):\n        # pylint: disable=import-error,no-member\n        from sklearn.datasets import load_iris\n        self.data = load_iris()\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    ScikitFlow()\n")),(0,i.kt)("p",null,"Save the flow as ",(0,i.kt)("inlineCode",{parentName:"p"},"scikitflow.py")," as run it as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python scikitflow.py --environment=conda run\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can search all available public Conda packages at ",(0,i.kt)("a",{parentName:"p",href:"https://anaconda.org"},"anaconda.org"))),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"By default, all conda packages are searched in the default channel\ni.e. ",(0,i.kt)("a",{parentName:"p",href:"https://conda-forge.org/feedstock-outputs/"},"conda-forge"),".\nHowever, some packages may exist in other channels."),(0,i.kt)("p",{parentName:"admonition"},"To specify a custom channel for a particular package, use the following syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},"{channel_name}::{package_name}"),"."),(0,i.kt)("p",{parentName:"admonition"},"Example: The package ",(0,i.kt)("inlineCode",{parentName:"p"},"pytorch")," exists in the ",(0,i.kt)("inlineCode",{parentName:"p"},"pytorch")," channel.\nThus, the dependency will be specified as follows:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"@conda(\n    python='3.9.13',\n    packages={'pytorch::pytorch': '2.1.2'}\n)\n"))),(0,i.kt)("h2",{id:"using-the-same-packages-in-all-steps"},"Using the same packages in all steps"),(0,i.kt)("p",null,"Sometimes you may want to use the same set of packages in all steps. Repeating the same\n",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," line for every step would be redundant."),(0,i.kt)("p",null,"In this case, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda_base")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi_base")," decorators that are defined\nat the class level, indicating that all steps should use the same environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, conda_base\n\n@conda_base(python='3.9.13',\n            packages={'scikit-learn': '1.3.1'})\nclass AllScikitFlow(FlowSpec):\n\n    @step\n    def start(self):\n        # pylint: disable=import-error,no-member\n        from sklearn.datasets import load_iris\n        self.data = load_iris()\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(self.data)\n\nif __name__ == '__main__':\n    AllScikitFlow()\n")),(0,i.kt)("p",null,"Save the flow as ",(0,i.kt)("inlineCode",{parentName:"p"},"allscikitflow.py")," as run it as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python allscikitflow.py --environment=conda run\n")),(0,i.kt)("p",null,"Note that we access a ",(0,i.kt)("inlineCode",{parentName:"p"},"scikit")," object stored in ",(0,i.kt)("inlineCode",{parentName:"p"},"self.data")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," step. When accessing\npackage-specific objects through artifacts, a matching package must be available in every step\nusing the artifact. This is the case by default when using the class-level decorators.\nIf you tried to do the same in the original ",(0,i.kt)("inlineCode",{parentName:"p"},"scikitflow.py"),", it would fail due to a missing package\nin the ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," step."),(0,i.kt)("h2",{id:"libraries-in-remote-tasks"},"Libraries in remote tasks"),(0,i.kt)("p",null,"A major benefit of ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," is that they allow you to define libraries that will be\nautomatically made available when ",(0,i.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/requesting-resources"},"you execute tasks remotely"),"\non ",(0,i.kt)("inlineCode",{parentName:"p"},"@kubernetes")," or on ",(0,i.kt)("inlineCode",{parentName:"p"},"@batch"),". You don't need to do anything special to make this happen."),(0,i.kt)("p",null,"If you have ",(0,i.kt)("inlineCode",{parentName:"p"},"@kubernetes")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@batch")," ",(0,i.kt)("a",{parentName:"p",href:"/getting-started/infrastructure"},"configured to work with\nMetaflow"),", you can try:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python fractalflow.py --environment=pypi run --with kubernetes\n")),(0,i.kt)("p",null,"or ",(0,i.kt)("inlineCode",{parentName:"p"},"--with batch")," correspondingly. Everything should work exactly the same as with\nlocal runs."),(0,i.kt)("h2",{id:"libraries-in-production-deployments"},"Libraries in production deployments"),(0,i.kt)("p",null,"Another major benefit of ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda")," is that the environments they create a guaranteed\nto be stable when ",(0,i.kt)("a",{parentName:"p",href:"/production/introduction"},"deployed to production"),"."),(0,i.kt)("p",null,"For instance, if you deployed ",(0,i.kt)("inlineCode",{parentName:"p"},"FractalFlow")," in production on Argo Workflows like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python fractalflow.py --environment=pypi argo-workflows create\n")),(0,i.kt)("p",null,"all production runs would be guaranteed to always use exactly the same environment, even\nif new versions of the packages get released or even if old packages get removed. This\nis very desirable for production runs that should be maximally stable and predictable."),(0,i.kt)("h2",{id:"disabling-environments"},"Disabling environments"),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment=conda")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment=pypi")," all steps are executed in\nisolated environments. As a result, the steps don't have access to packages that are\ninstalled system-wide. This is desirable, as it makes the flow more reproducible as it\ndoesn't depend on packages that may exist just in your environment."),(0,i.kt)("p",null,"However, sometimes a need may arise to be able to access a system-wide package in one\nstep, while using isolated environments in other steps. For instance, you may use\n",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/containers"},"a custom Docker image")," in conjuction with ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi"),"\nor ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda"),", accessing packages directly from the image in a step."),(0,i.kt)("p",null,"To make this possible, you can set ",(0,i.kt)("inlineCode",{parentName:"p"},"@conda(disabled=True)")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@pypi(disabled=True)")," at\nthe step level. A step with PyPI/Conda disabled behaves as if the flow runs without\n",(0,i.kt)("inlineCode",{parentName:"p"},"--environment"),"."),(0,i.kt)("p",null,"To demonstrate this, consider this flow, ",(0,i.kt)("inlineCode",{parentName:"p"},"peekabooflow.py"),", that prints out the path\nof the Python interpreter used in each step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nfrom metaflow import FlowSpec, step, conda_base, conda\n\n@conda_base(python='3.9.13')\nclass PeekabooFlow(FlowSpec):\n\n    @step\n    def start(self):\n        print(sys.executable)\n        self.next(self.peekaboo)\n\n    @conda(disabled=True)\n    @step\n    def peekaboo(self):\n        print(sys.executable)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print(sys.executable)\n\nif __name__ == '__main__':\n    PeekabooFlow()\n")),(0,i.kt)("p",null,"Run the flow as usual:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ python peekabooflow.py --environment=conda run\n")),(0,i.kt)("p",null,"Notice how the path is the same in the ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," steps but different in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"peekaboo")," step which uses a system-wide Python installation."))}m.isMDXComponent=!0}}]);