"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[537],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function m(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),d=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=m(e,["components","mdxType","originalType","parentName"]),c=d(a),u=n,y=c["".concat(s,".").concat(u)]||c[u]||p[u]||o;return a?r.createElement(y,i(i({ref:t},l),{},{components:a})):r.createElement(y,i({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=c;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m.mdxType="string"==typeof e?e:n,i[1]=m;for(var d=2;d<o;d++)i[d]=a[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},9494:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>m,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={},i="Cards - Visualizing results",m={unversionedId:"api/cards",id:"api/cards",title:"Cards - Visualizing results",description:"Metaflow Cards allows you to produce human readable reports in workflows and observe their behavior live. Use the following APIs to enable, customize, and access cards:",source:"@site/docs/api/cards.md",sourceDirName:"api",slug:"/api/cards",permalink:"/api/cards",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/cards.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"S3 - Accessing data in S3 quickly",permalink:"/api/S3"},next:{title:"ArgoEvent - Create events to trigger flows",permalink:"/api/argoevent"}},s={},d=[{value:"Retrieving cards",id:"retrieving-cards",level:2},{value:"Card components",id:"card-components",level:2},{value:"Markdown",id:"markdown",level:3},{value:"Image",id:"image",level:3},{value:"Artifact",id:"artifact",level:3},{value:"Table",id:"table",level:3},{value:"VegaChart",id:"vegachart",level:3},{value:"ProgressBar",id:"progressbar",level:3},{value:"Defining a custom card",id:"defining-a-custom-card",level:2}],l=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},p=l("DocSection"),c=l("SigArgSection"),u=l("SigArg"),y=l("Description"),g=l("ParamSection"),f=l("Parameter"),h=l("CodeOutputBlock"),k={toc:d};function b(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"cards---visualizing-results"},"Cards - Visualizing results"),(0,n.kt)("p",null,"Metaflow Cards allows you to produce ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/visualizing-results"},"human readable reports in workflows and observe their behavior live"),". Use the following APIs to enable, customize, and access cards:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Enable cards")," by adding ",(0,n.kt)("a",{parentName:"li",href:"/api/step-decorators/card"},"the ",(0,n.kt)("inlineCode",{parentName:"a"},"@card")," decorator")," in any step."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Specify card contents")," with ",(0,n.kt)("a",{parentName:"li",href:"#card-components"},"card components"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Populate card components")," with ",(0,n.kt)("a",{parentName:"li",href:"/api/current#card"},"the ",(0,n.kt)("inlineCode",{parentName:"a"},"current")," object"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Retrieve cards")," with ",(0,n.kt)("a",{parentName:"li",href:"#retrieving-cards"},"the ",(0,n.kt)("inlineCode",{parentName:"a"},"get_cards")," method")," or on the command line with the ",(0,n.kt)("inlineCode",{parentName:"li"},"card")," commands."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Create fully custom, shareable cards")," with custom ",(0,n.kt)("a",{parentName:"li",href:"#defining-a-custom-card"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaflowCard")," classes"),".")),(0,n.kt)("h2",{id:"retrieving-cards"},"Retrieving cards"),(0,n.kt)("p",null,"To retrieve a card after a run has finished, use the ",(0,n.kt)("inlineCode",{parentName:"p"},"get_cards")," function e.g. in a notebook or the ",(0,n.kt)("inlineCode",{parentName:"p"},"card get")," command on the CLI."),(0,n.kt)("p",null,"Since a task can contain multiple cards ",(0,n.kt)("inlineCode",{parentName:"p"},"get_cards")," returns a container object, ",(0,n.kt)("inlineCode",{parentName:"p"},"CardContainer"),", which holds ",(0,n.kt)("inlineCode",{parentName:"p"},"Card")," objects corresponding to individual cards. Notably both ",(0,n.kt)("inlineCode",{parentName:"p"},"CardContainer")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"Card")," objects contain a function that allow them to visualize cards in the notebook output cell automatically, so a single ",(0,n.kt)("inlineCode",{parentName:"p"},"get_cards")," call can be used to show all cards of a step in a notebook."),(0,n.kt)(p,{type:"function",name:"get_cards",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_client.py#L224",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"task",type:"Union",mdxType:"SigArg"}),(0,n.kt)(u,{name:"id",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"type",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"follow_resumed",type:"bool",default:"True",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Get cards related to a `Task`.",extended_summary:"Note that `get_cards` resolves the cards contained by the task, but it doesn't actually\\nretrieve them from the datastore. Actual card contents are retrieved lazily either when\\nthe card is rendered in a notebook to when you call `Card.get`. This means that\\n`get_cards` is a fast call even when individual cards contain a lot of data.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"task",type:"Union[str, `Task`]",desc:"A `Task` object or pathspec `{flow_name}/{run_id}/{step_name}/{task_id}` that\\nuniquely identifies a task.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"id",type:"str, optional, default None",desc:"The ID of card to retrieve if multiple cards are present.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"type",type:"str, optional, default None",desc:"The type of card to retrieve if multiple cards are present.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"follow_resumed",type:"bool, default True",desc:"If the task has been resumed, then setting this flag will resolve the card for\\nthe origin task.",mdxType:"Parameter"})),(0,n.kt)(g,{name:"Returns",mdxType:"ParamSection"},(0,n.kt)(f,{type:"CardContainer",desc:"A list-like object that holds `Card` objects.",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"class",name:"CardContainer",module:"metaflow.cards",show_import:"False",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_client.py#L145",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"`CardContainer` is an immutable list-like object, returned by `get_cards`,\\nwhich contains individual `Card`s.",extended_summary:"Notably, `CardContainer` contains a special\\n`_repr_html_` function which renders cards automatically in an output\\ncell of a notebook.\\n\\nThe following operations are supported:\\n```\\ncards = get_cards(MyTask)\\n\\n# retrieve by index\\nfirst_card = cards[0]\\n\\n# check length\\nif len(cards) > 1:\\n    print('many cards present!')\\n\\n# iteration\\nlist_of_cards = list(cards)\\n```",mdxType:"Description"})),(0,n.kt)(p,{type:"class",name:"Card",module:"metaflow.cards",show_import:"False",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_client.py#L22",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"`Card` represents an individual Metaflow Card, a single HTML file, produced by\\nthe card `@card` decorator. `Card`s are contained by `CardContainer`, returned by\\n`get_cards`.",extended_summary:"Note that the contents of the card, an HTML file, is retrieved lazily when you call\\n`Card.get` for the first time or when the card is rendered in a notebook.",mdxType:"Description"})),(0,n.kt)(p,{type:"method",name:"Card.get",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_client.py#L72",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Retrieves the HTML contents of the card from the\\nMetaflow datastore.",mdxType:"Description"}),(0,n.kt)(g,{name:"Returns",mdxType:"ParamSection"},(0,n.kt)(f,{type:"str",desc:"HTML contents of the card.",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"Card.view",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_client.py#L115",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Opens the card in a local web browser.",extended_summary:"This call uses Python's built-in [`webbrowser`](https://docs.python.org/3/library/webbrowser.html)\\nmodule to open the card.",mdxType:"Description"})),(0,n.kt)("h2",{id:"card-components"},"Card components"),(0,n.kt)("p",null,"You can customize the contents of a card easily using ",(0,n.kt)("em",{parentName:"p"},"card components"),", a set of visual elements included in Metaflow which are documented below. See ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/visualizing-results/easy-custom-reports-with-card-components"},"Easy Custom Reports with Card Components")," for instructions."),(0,n.kt)("p",null,"The components are added to cards in ",(0,n.kt)("inlineCode",{parentName:"p"},"@step")," methods (or functions called from steps), using ",(0,n.kt)("a",{parentName:"p",href:"/api/current#card"},"the ",(0,n.kt)("inlineCode",{parentName:"a"},"current.card")," object"),"."),(0,n.kt)("h3",{id:"markdown"},"Markdown"),(0,n.kt)(p,{type:"class",name:"Markdown",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L647",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"text",default:"None",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"A block of text formatted in Markdown.",extended_summary:'Example:\\n```\\ncurrent.card.append(\\n    Markdown("# This is a header appended from `@step` code")\\n)\\n```',mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"text",type:"str",desc:"Text formatted in Markdown.",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"Markdown.update",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L666",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"}),(0,n.kt)(u,{name:"text",default:"None",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"#FIXME document",mdxType:"Description"})),(0,n.kt)("h3",{id:"image"},"Image"),(0,n.kt)(p,{type:"class",name:"Image",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L235",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"src",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"label",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"disable_updates",type:"bool",default:"True",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"An image.",extended_summary:'`Images can be created directly from PNG/JPG/GIF `bytes`, `PIL.Image`s,\\nor Matplotlib figures. Note that the image data is embedded in the card,\\nso no external files are required to show the image.\\n\\nExample: Create an `Image` from bytes:\\n```\\ncurrent.card.append(\\n    Image(\\n        requests.get("https://www.gif-vif.com/hacker-cat.gif").content,\\n        "Image From Bytes"\\n    )\\n)\\n```\\n\\nExample: Create an `Image` from a Matplotlib figure\\n```\\nimport pandas as pd\\nimport numpy as np\\ncurrent.card.append(\\n    Image.from_matplotlib(\\n        pandas.DataFrame(\\n            np.random.randint(0, 100, size=(15, 4)),\\n            columns=list("ABCD"),\\n        ).plot()\\n    )\\n)\\n```\\n\\nExample: Create an `Image` from a [PIL](https://pillow.readthedocs.io/) Image\\n```\\nfrom PIL import Image as PILImage\\ncurrent.card.append(\\n    Image.from_pil_image(\\n        PILImage.fromarray(np.random.randn(1024, 768), "RGB"),\\n        "From PIL Image"\\n    )\\n)\\n```',mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"src",type:"bytes",desc:"The image data in `bytes`.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"label",type:"str",desc:"Optional label for the image.",mdxType:"Parameter"})),(0,n.kt)(g,{name:"Attributes",mdxType:"ParamSection"},(0,n.kt)(f,{name:"component_id",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"Image.from_matplotlib",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L541",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"plot",mdxType:"SigArg"}),(0,n.kt)(u,{name:"label",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"disable_updates",type:"bool",default:"False",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Create an `Image` from a Matplotlib plot.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"plot",type:"matplotlib.figure.Figure or matplotlib.axes.Axes or matplotlib.axes._subplots.AxesSubplot",desc:"a PIL axes (plot) object.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"label",type:"str, optional",desc:"Optional label for the image.",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"Image.from_pil_image",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L507",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"pilimage",mdxType:"SigArg"}),(0,n.kt)(u,{name:"label",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"disable_updates",type:"bool",default:"False",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Create an `Image` from a PIL image.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"pilimage",type:"PIL.Image",desc:"a PIL image object.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"label",type:"str, optional",desc:"Optional label for the image.",mdxType:"Parameter"}))),(0,n.kt)("h3",{id:"artifact"},"Artifact"),(0,n.kt)(p,{type:"class",name:"Artifact",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L51",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"artifact",type:"Any",mdxType:"SigArg"}),(0,n.kt)(u,{name:"name",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"compressed",type:"bool",default:"True",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"A pretty-printed version of any Python object.",extended_summary:"Large objects are truncated using Python's built-in [`reprlib`](https://docs.python.org/3/library/reprlib.html).\\n\\nExample:\\n```\\nfrom datetime import datetime\\ncurrent.card.append(Artifact({'now': datetime.utcnow()}))\\n```",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"artifact",type:"object",desc:"Any Python object.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"name",type:"str, optional",desc:"Optional label for the object.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"compressed",type:"bool, default: True",desc:"Use a truncated representation.",mdxType:"Parameter"}))),(0,n.kt)("h3",{id:"table"},"Table"),(0,n.kt)(p,{type:"class",name:"Table",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L97",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"data",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"headers",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"disable_updates",type:"bool",default:"False",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"A table.",extended_summary:"The contents of the table can be text or numerical data, a Pandas dataframe,\\nor other card components: `Artifact`, `Image`, `Markdown` objects.\\n\\nExample: Text and artifacts\\n```\\nfrom metaflow.cards import Table, Artifact\\ncurrent.card.append(\\n    Table([\\n        ['first row', Artifact({'a': 2})],\\n        ['second row', Artifact(3)]\\n    ])\\n)\\n```\\n\\nExample: Table from a Pandas dataframe\\n```\\nfrom metaflow.cards import Table\\nimport pandas as pd\\nimport numpy as np\\ncurrent.card.append(\\n    Table.from_dataframe(\\n        pd.DataFrame(\\n            np.random.randint(0, 100, size=(15, 4)),\\n            columns=list(\"ABCD\")\\n        )\\n    )\\n)\\n```",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"data",type:"List[List[str or MetaflowCardComponent]], optional",desc:"List (rows) of lists (columns). Each item can be a string or a `MetaflowCardComponent`.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"headers",type:"List[str], optional",desc:"Optional header row for the table.",mdxType:"Parameter"})),(0,n.kt)(g,{name:"Attributes",mdxType:"ParamSection"},(0,n.kt)(f,{name:"component_id",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"Table.from_dataframe",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L167",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"dataframe",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"truncate",type:"bool",default:"True",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Create a `Table` based on a Pandas dataframe.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"dataframe",type:"Optional[pandas.DataFrame]",desc:"Pandas dataframe.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"truncate",type:"bool, default: True",desc:"Truncate large dataframe instead of showing all rows (default: True).",mdxType:"Parameter"}))),(0,n.kt)("h3",{id:"vegachart"},"VegaChart"),(0,n.kt)(p,{type:"class",name:"VegaChart",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L756",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"spec",type:"dict",mdxType:"SigArg"}),(0,n.kt)(u,{name:"show_controls",type:"bool",default:"False",mdxType:"SigArg"}))),(0,n.kt)(p,{type:"method",name:"VegaChart.from_altair_chart",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L791",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"altair_chart",mdxType:"SigArg"}))),(0,n.kt)(p,{type:"method",name:"VegaChart.update",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L766",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"}),(0,n.kt)(u,{name:"spec",default:"None",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Update the chart.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"spec",type:"dict or altair.Chart",desc:"The updated chart spec or an altair Chart Object.",mdxType:"Parameter"}))),(0,n.kt)("h3",{id:"progressbar"},"ProgressBar"),(0,n.kt)(p,{type:"class",name:"ProgressBar",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L680",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"max",type:"int",default:"100",mdxType:"SigArg"}),(0,n.kt)(u,{name:"label",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"value",type:"int",default:"0",mdxType:"SigArg"}),(0,n.kt)(u,{name:"unit",type:"Optional",default:"None",mdxType:"SigArg"}),(0,n.kt)(u,{name:"metadata",type:"Optional",default:"None",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"A Progress bar for tracking progress of any task.",extended_summary:'Example:\\n```\\nprogress_bar = ProgressBar(\\n    max=100,\\n    label="Progress Bar",\\n    value=0,\\n    unit="%",\\n    metadata="0.1 items/s"\\n)\\ncurrent.card.append(\\n    progress_bar\\n)\\nfor i in range(100):\\n    progress_bar.update(i, metadata="%s items/s" % i)\\n\\n```',mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"max",type:"int, default 100",desc:"The maximum value of the progress bar.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"label",type:"str, optional, default None",desc:"Optional label for the progress bar.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"value",type:"int, default 0",desc:"Optional initial value of the progress bar.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"unit",type:"str, optional, default None",desc:"Optional unit for the progress bar.",mdxType:"Parameter"}),(0,n.kt)(f,{name:"metadata",type:"str, optional, default None",desc:"Optional additional information to show on the progress bar.",mdxType:"Parameter"})),(0,n.kt)(g,{name:"Attributes",mdxType:"ParamSection"},(0,n.kt)(f,{name:"component_id",mdxType:"Parameter"}))),(0,n.kt)(p,{type:"method",name:"ProgressBar.update",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/components.py#L733",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"}),(0,n.kt)(u,{name:"new_value",type:"int",mdxType:"SigArg"}),(0,n.kt)(u,{name:"metadata",type:"Optional",default:"None",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"#FIXME document",mdxType:"Description"})),(0,n.kt)("h2",{id:"defining-a-custom-card"},"Defining a custom card"),(0,n.kt)("p",null,"You can define custom cards types (",(0,n.kt)("inlineCode",{parentName:"p"},"T")," in ",(0,n.kt)("inlineCode",{parentName:"p"},"@card(type=T)"),") by creating a Python package that includes a class that derives from ",(0,n.kt)("inlineCode",{parentName:"p"},"MetaflowCard"),", documented below. Read more in ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates"},"Advanced, Shareable Cards with Card Templates"),"."),(0,n.kt)("p",null,"Find detailed instructions, a starter template, and an example of a ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/metaflow-card-html"},"simple static custom card")," and ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/metaflow-card-scatter3d"},"an example of a dynamic card"),"."),(0,n.kt)(p,{type:"class",name:"MetaflowCard",module:"metaflow.cards",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/card.py#L8",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"options",mdxType:"SigArg"})),(0,n.kt)(y,{summary:"Metaflow cards derive from this base class.",extended_summary:"Subclasses of this class are called *card types*. The desired card\\ntype `T` is defined in the `@card` decorator as `@card(type=T)`.\\n\\nAfter a task with `@card(type=T, options=S)` finishes executing, Metaflow instantiates\\na subclass `C` of `MetaflowCard` that has its `type` attribute set to `T`, i.e. `C.type=T`.\\nThe constructor is given the options dictionary `S` that contains arbitrary\\nJSON-encodable data that is passed to the instance, parametrizing the card. The subclass\\nmay override the constructor to capture and process the options.\\n\\nThe subclass needs to implement a `render(task)` method that produces the card\\ncontents in HTML, given the finished task that is represented by a `Task` object.",mdxType:"Description"}),(0,n.kt)(g,{name:"Parameters",mdxType:"ParamSection"},(0,n.kt)(f,{name:"options",type:"Dict",desc:"JSON-encodable dictionary containing user-definable options for the class.",mdxType:"Parameter"})),(0,n.kt)(g,{name:"Attributes",mdxType:"ParamSection"},(0,n.kt)(f,{name:"type",type:"str",desc:"Card type string. Note that this should be a globally unique name, similar to a\\nPython package name, to avoid name clashes between different custom cards.",mdxType:"Parameter"}))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"ShowDoc(MetaflowCard.render)\n")),(0,n.kt)(h,{lang:"python",mdxType:"CodeOutputBlock"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"    ---------------------------------------------------------------------------\n\n    AttributeError                            Traceback (most recent call last)\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/IPython/core/formatters.py:344, in BaseFormatter.__call__(self, obj)\n        342     method = get_real_method(obj, self.print_method)\n        343     if method is not None:\n    --\x3e 344         return method()\n        345     return None\n        346 else:\n\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/nbdoc/showdoc.py:218, in ShowDoc._repr_html_(self)\n        216 def _repr_html_(self):\n        217     \"This method controls what is displayed in Jupyter Notebooks.\"\n    --\x3e 218     return f'<HTMLRemove>\\n{self.nbhtml}\\n</HTMLRemove>\\n{self.jsx}'\n\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/nbdoc/showdoc.py:253, in ShowDoc.jsx(self)\n        251 nm = f'<DocSection type=\"{self.typ}\" name=\"{self.objnm}\" module=\"{self.modnm}\" show_import=\"{self.show_import}\" heading_level=\"{self.hd_lvl}\"{self._src_link_attr}>'\n        252 spoof = '...' if self.decorator else self.spoofstr\n    --\x3e 253 sp = get_sig_section(self.obj, spoofstr=spoof)\n        254 return f'{nm}\\n{sp}\\n' + self.npdocs + '\\n</DocSection>'\n\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/nbdoc/showdoc.py:115, in get_sig_section(obj, spoofstr)\n        113         return ''\n        114     params = sig.parameters.items()\n    --\x3e 115     jsx_params = [fmt_sig_param(p) for _, p in params]\n        116 else:\n        117     jsx_params = [f'<SigArg name=\"{spoofstr}\" />']\n\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/nbdoc/showdoc.py:115, in <listcomp>(.0)\n        113         return ''\n        114     params = sig.parameters.items()\n    --\x3e 115     jsx_params = [fmt_sig_param(p) for _, p in params]\n        116 else:\n        117     jsx_params = [f'<SigArg name=\"{spoofstr}\" />']\n\n\n    File ~/mambaforge/envs/docs/lib/python3.11/site-packages/nbdoc/showdoc.py:99, in fmt_sig_param(p)\n         96 prefix = f'<SigArg name=\"{name}\" '\n         98 if p.annotation != inspect._empty:\n    ---\x3e 99     prefix += f'type=\"{p.annotation.__name__}\" '\n        100 if p.default != inspect._empty:\n        101     prefix += f'default=\"{p.default}\" '\n\n\n    AttributeError: 'str' object has no attribute '__name__'\n\n\n\n\n\n    <nbdoc.showdoc.ShowDoc at 0x10a0ccb10>\n"))),(0,n.kt)(p,{type:"method",name:"MetaflowCard.render_runtime",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/card.py#L101",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"}),(0,n.kt)(u,{name:"task",mdxType:"SigArg"}),(0,n.kt)(u,{name:"data",mdxType:"SigArg"}))),(0,n.kt)(p,{type:"method",name:"MetaflowCard.refresh",module:"metaflow.cards",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/cards/card_modules/card.py#L105",mdxType:"DocSection"},(0,n.kt)(c,{mdxType:"SigArgSection"},(0,n.kt)(u,{name:"self",mdxType:"SigArg"}),(0,n.kt)(u,{name:"task",mdxType:"SigArg"}),(0,n.kt)(u,{name:"data",mdxType:"SigArg"}))))}b.isMDXComponent=!0}}]);