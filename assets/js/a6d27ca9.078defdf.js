"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3399],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),f=r,u=d["".concat(l,".").concat(f)]||d[f]||m[f]||o;return a?n.createElement(u,i(i({ref:t},c),{},{components:a})):n.createElement(u,i({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9895:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},i="FlowSpec - Constructing flows",s={unversionedId:"api/flowspec",id:"api/flowspec",title:"FlowSpec - Constructing flows",description:"Metaflow flows are defined by inhering from the FlowSpec class:",source:"@site/docs/api/flowspec.md",sourceDirName:"api",slug:"/api/flowspec",permalink:"/api/flowspec",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/flowspec.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Client API - Accessing past results",permalink:"/api/client"},next:{title:"Current - Operating a run",permalink:"/api/current"}},l={},p=[{value:"Defining a workflow",id:"defining-a-workflow",level:2},{value:"Working with foreaches",id:"working-with-foreaches",level:2},{value:"Parameters",id:"parameters",level:2},{value:"Deploy-time parameters",id:"deploy-time-parameters",level:3},{value:"IncludeFile",id:"includefile",level:2}],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},m=c("DocSection"),d=c("SigArgSection"),f=c("SigArg"),u=c("Description"),h=c("ParamSection"),y=c("Parameter"),w={toc:p};function k(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},w,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flowspec---constructing-flows"},"FlowSpec - Constructing flows"),(0,r.kt)("p",null,"Metaflow ",(0,r.kt)("a",{parentName:"p",href:"/metaflow/basics"},"flows are defined")," by inhering from the ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass MyFlow(FlowSpec):\n\n    @step\n    def start(self):\n        self.next(self.end)\n       \n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    MyFlow()\n")),(0,r.kt)("p",null,"This class has no other uses. It can't be instantiated directly."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec")," exposes a few methods and attributes that you can use to construct a flow, which are listed below. You can add more functionality in your flows through ",(0,r.kt)("a",{parentName:"p",href:"step-decorators"},"step-level decorators")," and ",(0,r.kt)("a",{parentName:"p",href:"flow-decorators"},"flow-level decorators"),"."),(0,r.kt)("p",null,"You can parametrize flows through the ",(0,r.kt)("a",{parentName:"p",href:"#parameters"},(0,r.kt)("inlineCode",{parentName:"a"},"Parameter"))," object that are defined as class variables inside a flow. You can also include files as parameters through the ",(0,r.kt)("a",{parentName:"p",href:"#includefile"},(0,r.kt)("inlineCode",{parentName:"a"},"IncludeFile"))," object."),(0,r.kt)("p",null,"To query and manipulate the currently executing run inside your flow, see the ",(0,r.kt)("a",{parentName:"p",href:"current"},(0,r.kt)("inlineCode",{parentName:"a"},"current"))," object. To access results produced by a flow, see the ",(0,r.kt)("a",{parentName:"p",href:"client"},"Client API"),"."),(0,r.kt)("h2",{id:"defining-a-workflow"},"Defining a workflow"),(0,r.kt)("p",null,"Annotate methods that are a part of your Metaflow workflow with ",(0,r.kt)("a",{parentName:"p",href:"/api/step-decorators/step"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"@step")," decorator"),". Use ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec.next")," to define transitions between steps:"),(0,r.kt)(m,{type:"method",name:"FlowSpec.next",module:"metaflow",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/flowspec.py#L791",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"},(0,r.kt)(f,{name:"*dsts, foreach=None, condition=None",mdxType:"SigArg"})),(0,r.kt)(u,{summary:"Indicates the next step to execute after this step has completed.",extended_summary:"This statement should appear as the last statement of each step, except\\nthe end step.\\n\\nThere are several valid formats to specify the next step:\\n\\n- Straight-line connection: `self.next(self.next_step)` where `next_step` is a method in\\n  the current class decorated with the `@step` decorator.\\n\\n- Static fan-out connection: `self.next(self.step1, self.step2, ...)` where `stepX` are\\n  methods in the current class decorated with the `@step` decorator.\\n\\n- Foreach branch:\\n  ```\\n  self.next(self.foreach_step, foreach='foreach_iterator')\\n  ```\\n  In this situation, `foreach_step` is a method in the current class decorated with the\\n  `@step` decorator and `foreach_iterator` is a variable name in the current class that\\n  evaluates to an iterator. A task will be launched for each value in the iterator and\\n  each task will execute the code specified by the step `foreach_step`.\\n\\n- Switch statement:\\n  ```\\n  self.next({\"case1\": self.step_a, \"case2\": self.step_b}, condition='condition_variable')\\n  ```\\n  In this situation, `step_a` and `step_b` are methods in the current class decorated\\n  with the `@step` decorator and `condition_variable` is a variable name in the current\\n  class. The value of the condition variable determines which step to execute. If the\\n  value doesn't match any of the dictionary keys, a RuntimeError is raised.",mdxType:"Description"}),(0,r.kt)(h,{name:"Parameters",mdxType:"ParamSection"},(0,r.kt)(y,{name:"dsts",type:"Callable[..., None]",desc:"One or more methods annotated with `@step`.",mdxType:"Parameter"})),(0,r.kt)(h,{name:"Raises",mdxType:"ParamSection"},(0,r.kt)(y,{type:"InvalidNextException",desc:"Raised if the format of the arguments does not match one of the ones given above.",mdxType:"Parameter"}))),(0,r.kt)("h2",{id:"working-with-foreaches"},"Working with foreaches"),(0,r.kt)("p",null,"Use the operations below, ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec.input"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec.index"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec.foreach_stack")," to query the status of the currently executing foreach branch. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"FlowSpec.merge_artifacts()")," to handle incoming artifacts in a join step."),(0,r.kt)(m,{type:"property",name:"FlowSpec.input",module:"metaflow.flowspec",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/",mdxType:"DocSection"},(0,r.kt)(u,{summary:"The value of the foreach artifact in this foreach branch.\\n\\nIn a foreach step, multiple instances of this step (tasks) will be executed,\\none for each element in the foreach. This property returns the element passed\\nto the current task. If this is not a foreach step, this returns None.\\n\\nIf you need to know the values of the parent tasks in a nested foreach, use\\n`FlowSpec.foreach_stack`.\\n",mdxType:"Description"}),(0,r.kt)(h,{name:"Returns",mdxType:"ParamSection"},(0,r.kt)(y,{type:"object, optional",desc:"Input passed to the foreach task.",mdxType:"Parameter"}))),(0,r.kt)(m,{type:"property",name:"FlowSpec.index",module:"metaflow.flowspec",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/",mdxType:"DocSection"},(0,r.kt)(u,{summary:"The index of this foreach branch.\\n\\nIn a foreach step, multiple instances of this step (tasks) will be executed,\\none for each element in the foreach. This property returns the zero based index\\nof the current task. If this is not a foreach step, this returns None.\\n\\nIf you need to know the indices of the parent tasks in a nested foreach, use\\n`FlowSpec.foreach_stack`.\\n",mdxType:"Description"}),(0,r.kt)(h,{name:"Returns",mdxType:"ParamSection"},(0,r.kt)(y,{type:"int, optional",desc:"Index of the task in a foreach step.",mdxType:"Parameter"}))),(0,r.kt)(m,{type:"method",name:"FlowSpec.foreach_stack",module:"metaflow",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/flowspec.py#L536",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"},(0,r.kt)(f,{name:"self",mdxType:"SigArg"})),(0,r.kt)(u,{summary:"Returns the current stack of foreach indexes and values for the current step.",extended_summary:"Use this information to understand what data is being processed in the current\\nforeach branch. For example, considering the following code:\\n```\\n@step\\ndef root(self):\\n    self.split_1 = ['a', 'b', 'c']\\n    self.next(self.nest_1, foreach='split_1')\\n\\n@step\\ndef nest_1(self):\\n    self.split_2 = ['d', 'e', 'f', 'g']\\n    self.next(self.nest_2, foreach='split_2'):\\n\\n@step\\ndef nest_2(self):\\n    foo = self.foreach_stack()\\n```\\n\\n`foo` will take the following values in the various tasks for nest_2:\\n```\\n    [(0, 3, 'a'), (0, 4, 'd')]\\n    [(0, 3, 'a'), (1, 4, 'e')]\\n    ...\\n    [(0, 3, 'a'), (3, 4, 'g')]\\n    [(1, 3, 'b'), (0, 4, 'd')]\\n    ...\\n```\\nwhere each tuple corresponds to:\\n\\n- The index of the task for that level of the loop.\\n- The number of splits for that level of the loop.\\n- The value for that level of the loop.\\n\\nNote that the last tuple returned in a task corresponds to:\\n\\n- 1st element: value returned by `self.index`.\\n- 3rd element: value returned by `self.input`.",mdxType:"Description"}),(0,r.kt)(h,{name:"Returns",mdxType:"ParamSection"},(0,r.kt)(y,{type:"List[Tuple[int, int, Any]]",desc:"An array describing the current stack of foreach steps.",mdxType:"Parameter"}))),(0,r.kt)(m,{type:"method",name:"FlowSpec.merge_artifacts",module:"metaflow",show_import:"False",heading_level:"4",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/flowspec.py#L620",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"},(0,r.kt)(f,{name:"self",mdxType:"SigArg"}),(0,r.kt)(f,{name:"inputs",type:"Inputs",mdxType:"SigArg"}),(0,r.kt)(f,{name:"exclude",type:"Optional",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"include",type:"Optional",default:"None",mdxType:"SigArg"})),(0,r.kt)(u,{summary:"Helper function for merging artifacts in a join step.",extended_summary:"This function takes all the artifacts coming from the branches of a\\njoin point and assigns them to self in the calling step. Only artifacts\\nnot set in the current step are considered. If, for a given artifact, different\\nvalues are present on the incoming edges, an error will be thrown and the artifacts\\nthat conflict will be reported.\\n\\nAs a few examples, in the simple graph: A splitting into B and C and joining in D:\\n```\\nA:\\n  self.x = 5\\n  self.y = 6\\nB:\\n  self.b_var = 1\\n  self.x = from_b\\nC:\\n  self.x = from_c\\n\\nD:\\n  merge_artifacts(inputs)\\n```\\nIn D, the following artifacts are set:\\n  - `y` (value: 6), `b_var` (value: 1)\\n  - if `from_b` and `from_c` are the same, `x` will be accessible and have value `from_b`\\n  - if `from_b` and `from_c` are different, an error will be thrown. To prevent this error,\\n    you need to manually set `self.x` in D to a merged value (for example the max) prior to\\n    calling `merge_artifacts`.",mdxType:"Description"}),(0,r.kt)(h,{name:"Parameters",mdxType:"ParamSection"},(0,r.kt)(y,{name:"inputs",type:"Inputs",desc:"Incoming steps to the join point.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"exclude",type:"List[str], optional, default None",desc:"If specified, do not consider merging artifacts with a name in `exclude`.\\nCannot specify if `include` is also specified.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"include",type:"List[str], optional, default None",desc:"If specified, only merge artifacts specified. Cannot specify if `exclude` is\\nalso specified.",mdxType:"Parameter"})),(0,r.kt)(h,{name:"Raises",mdxType:"ParamSection"},(0,r.kt)(y,{type:"MetaflowException",desc:"This exception is thrown if this is not called in a join step.",mdxType:"Parameter"}),(0,r.kt)(y,{type:"UnhandledInMergeArtifactsException",desc:"This exception is thrown in case of unresolved conflicts.",mdxType:"Parameter"}),(0,r.kt)(y,{type:"MissingInMergeArtifactsException",desc:"This exception is thrown in case an artifact specified in `include` cannot\\nbe found.",mdxType:"Parameter"}))),(0,r.kt)("h2",{id:"parameters"},"Parameters"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Parameter")," class is used to define parameters for a flow."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Parameter")," objects must be defined as class variables inside a flow. The parameter values are available as read-only artifacts in all steps of the flow. For instructions, see ",(0,r.kt)("a",{parentName:"p",href:"/metaflow/basics#how-to-define-parameters-for-flows"},"How to define parameters for flows"),"."),(0,r.kt)(m,{type:"class",name:"Parameter",module:"metaflow",show_import:"False",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/parameters.py#L276",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"},(0,r.kt)(f,{name:"name",type:"str",mdxType:"SigArg"}),(0,r.kt)(f,{name:"default",type:"Union",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"type",type:"Union",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"help",type:"Optional",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"required",type:"Optional",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"show_default",type:"Optional",default:"None",mdxType:"SigArg"}),(0,r.kt)(f,{name:"**kwargs: Dict[str, Any]",type:"Dict",mdxType:"SigArg"})),(0,r.kt)(u,{summary:"Defines a parameter for a flow.",extended_summary:"Parameters must be instantiated as class variables in flow classes, e.g.\\n```\\nclass MyFlow(FlowSpec):\\n    param = Parameter('myparam')\\n```\\nin this case, the parameter is specified on the command line as\\n```\\npython myflow.py run --myparam=5\\n```\\nand its value is accessible through a read-only artifact like this:\\n```\\nprint(self.param == 5)\\n```\\nNote that the user-visible parameter name, `myparam` above, can be\\ndifferent from the artifact name, `param` above.\\n\\nThe parameter value is converted to a Python type based on the `type`\\nargument or to match the type of `default`, if it is set.",mdxType:"Description"}),(0,r.kt)(h,{name:"Parameters",mdxType:"ParamSection"},(0,r.kt)(y,{name:"name",type:"str",desc:"User-visible parameter name.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"default",type:"Union[str, float, int, bool, Dict[str, Any],",desc:"        Callable[\\n            [ParameterContext], Union[str, float, int, bool, Dict[str, Any]]\\n        ],\\n    ], optional, default None\\nDefault value for the parameter. Use a special `JSONType` class to\\nindicate that the value must be a valid JSON object. A function\\nimplies that the parameter corresponds to a *deploy-time parameter*.\\nThe type of the default value is used as the parameter `type`.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"type",type:"Type, default None",desc:"If `default` is not specified, define the parameter type. Specify\\none of `str`, `float`, `int`, `bool`, or `JSONType`. If None, defaults\\nto the type of `default` or `str` if none specified.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"help",type:"str, optional, default None",desc:"Help text to show in `run --help`.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"required",type:"bool, optional, default None",desc:"Require that the user specifies a value for the parameter. Note that if\\na default is provide, the required flag is ignored.\\nA value of None is equivalent to False.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"show_default",type:"bool, optional, default None",desc:"If True, show the default value in the help text. A value of None is equivalent\\nto True.",mdxType:"Parameter"}))),(0,r.kt)("h3",{id:"deploy-time-parameters"},"Deploy-time parameters"),(0,r.kt)("p",null,"It is possible to define the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," value programmatically before a run or a deployment is executed through a user-defined function. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"/production/scheduling-metaflow-flows/scheduling-with-aws-step-functions#deploy-time-parameters"},"documentation for Deploy Time Parameters"),"."),(0,r.kt)("p",null,"For instance, the following deploy-time parameter, ",(0,r.kt)("inlineCode",{parentName:"p"},"time"),", uses the current time as its default value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'def time_now(context):\n    return int(time.time())\n\nclass MyFlow(FlowSpec):\n    myparam = Parameter("time", type=int, default=time_now)\n')),(0,r.kt)("p",null,"Note that if the function returns a non-string value, you must specify the parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," when using deploy-time parameters, as the type of ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," can't be inferred automatically."),(0,r.kt)("p",null,"The function called gets a parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"context")," that contains attributes about the current parameter which you can use to customize the value returned:"),(0,r.kt)(m,{type:"class",name:"ParameterContext",module:"metaflow",show_import:"False",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"}),(0,r.kt)(u,{summary:"Information about the parameter being evaluated.",mdxType:"Description"}),(0,r.kt)(h,{name:"Attributes",mdxType:"ParamSection"},(0,r.kt)(y,{name:"flow_name",type:"str",desc:"Flow name",mdxType:"Parameter"}),(0,r.kt)(y,{name:"user_name",type:"str",desc:"User name",mdxType:"Parameter"}),(0,r.kt)(y,{name:"parameter_name",type:"str",desc:"Parameter name",mdxType:"Parameter"}))),(0,r.kt)("h2",{id:"includefile"},"IncludeFile"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"IncludeFile")," object is a special ",(0,r.kt)("inlineCode",{parentName:"p"},"Parameter")," that reads its value from a local file. For an example, see ",(0,r.kt)("a",{parentName:"p",href:"/scaling/data#data-in-local-files"},"Data in Local Files"),"."),(0,r.kt)(m,{type:"class",name:"IncludeFile",module:"metaflow",show_import:"False",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/includefile.py#L233",mdxType:"DocSection"},(0,r.kt)(d,{mdxType:"SigArgSection"},(0,r.kt)(f,{name:"name, **kwargs",mdxType:"SigArg"})),(0,r.kt)(u,{summary:"Includes a local file as a parameter for the flow.",extended_summary:"`IncludeFile` behaves like `Parameter` except that it reads its value from a file instead of\\nthe command line. The user provides a path to a file on the command line. The file contents\\nare saved as a read-only artifact which is available in all steps of the flow.",mdxType:"Description"}),(0,r.kt)(h,{name:"Parameters",mdxType:"ParamSection"},(0,r.kt)(y,{name:"name",type:"str",desc:"User-visible parameter name.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"default",type:"Union[str, Callable[ParameterContext, str]]",desc:"Default path to a local file. A function\\nimplies that the parameter corresponds to a *deploy-time parameter*.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"is_text",type:"bool, optional, default None",desc:"Convert the file contents to a string using the provided `encoding`.\\nIf False, the artifact is stored in `bytes`. A value of None is equivalent to\\nTrue.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"encoding",type:"str, optional, default None",desc:"Use this encoding to decode the file contexts if `is_text=True`. A value of None\\nis equivalent to utf-8.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"required",type:"bool, optional, default None",desc:"Require that the user specified a value for the parameter.\\n`required=True` implies that the `default` is not used. A value of None is\\nequivalent to False",mdxType:"Parameter"}),(0,r.kt)(y,{name:"help",type:"str, optional",desc:"Help text to show in `run --help`.",mdxType:"Parameter"}),(0,r.kt)(y,{name:"show_default",type:"bool, default True",desc:"If True, show the default value in the help text. A value of None is equivalent\\nto True.",mdxType:"Parameter"}))))}k.isMDXComponent=!0}}]);