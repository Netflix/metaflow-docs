"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9493],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>d});var a=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,a,n=function(e,t){if(null==e)return{};var o,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(o),d=n,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return o?a.createElement(f,i(i({ref:t},c),{},{components:o})):a.createElement(f,i({ref:t},c))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=o.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<r;p++)i[p]=o[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}m.displayName="MDXCreateElement"},6753:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=o(7462),n=(o(7294),o(3905));const r={},i="Composing Flows with Custom Decorators",s={unversionedId:"metaflow/composing-flows/introduction",id:"metaflow/composing-flows/introduction",title:"Composing Flows with Custom Decorators",description:"This is a new feature in Metaflow 2.16. Make sure you have a recent enough version of",source:"@site/docs/metaflow/composing-flows/introduction.md",sourceDirName:"metaflow/composing-flows",slug:"/metaflow/composing-flows/introduction",permalink:"/metaflow/composing-flows/introduction",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/composing-flows/introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Config-Driven Experimentation",permalink:"/metaflow/configuring-flows/config-driven-experimentation"},next:{title:"Custom Decorators",permalink:"/metaflow/composing-flows/custom-decorators"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Custom decorators",id:"custom-decorators",level:3},{value:"Mutators",id:"mutators",level:3},{value:"The <code>BaseFlow</code> pattern",id:"the-baseflow-pattern",level:3}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"composing-flows-with-custom-decorators"},"Composing Flows with Custom Decorators"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"This is a new feature in Metaflow 2.16. Make sure you have a recent enough version of\nMetaflow to use this feature.")),(0,n.kt)("p",null,"It is common for projects to include functionality that can be reused across multiple\nsteps and flows. For example, you might define shared, project-specific patterns for"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Accessing data,"),(0,n.kt)("li",{parentName:"ul"},"Running ETL,"),(0,n.kt)("li",{parentName:"ul"},"Tracking data and model lineage,"),(0,n.kt)("li",{parentName:"ul"},"Performing feature engineering and transformations,"),(0,n.kt)("li",{parentName:"ul"},"Training and evaluating a model,"),(0,n.kt)("li",{parentName:"ul"},"Accessing an external service, e.g. an LLM endpoint through a model router.")),(0,n.kt)("p",null,"You can handle cases like these by developing a shared library that encapsulates\nthe logic and importing it in your steps. Metaflow will ",(0,n.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"package the\nlibrary")," automatically for remote execution,\nensuring the logic works seamlessly from local development to production deployments."),(0,n.kt)("p",null,"This section introduces a powerful Metaflow feature: ",(0,n.kt)("strong",{parentName:"p"},"custom decorators and mutators"),".\nWhile importing and using a shared library in a step is straightforward, encapsulating\ncommon logic in a decorator offers several key advantages:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Clean ",(0,n.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Separation_of_concerns"},"separation of concerns")),":\nKeep shared logic out of step code, improving readability and maintainability.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Clarity and consistency"),": Applying a decorator makes the use of common patterns\nexplicit and uniform.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Flexibility"),": Easily enable, disable, or switch between behaviors without\ntouching step logic - great for implementing pluggable logic.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Correctness by default"),": Use mutators to apply the right patterns to all relevant steps automatically,\nso e.g. a centralized platform team can establish paved paths for all.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Reusable and portable"),": Distribute decorators as installable packages, whether private or public.\nMetaflow packages them for remote execution automatically, even if they live outside\n",(0,n.kt)("a",{parentName:"p",href:"/scaling/dependencies/project-structure"},"your project directory structure"),"."))),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Custom decorators and mutators let you develop, share, and reuse components across\nflows - without modifying Metaflow\u2019s core behavior. If you're looking to build a deeper infrastructure\nintegration, such as support for a new ",(0,n.kt)("a",{parentName:"p",href:"/production/scheduling-metaflow-flows/introduction"},"production\norchestrator"),", you need to use\n",(0,n.kt)("a",{parentName:"p",href:"https://github.com/Netflix/metaflow-extensions-template"},"the Metaflow Extension mechanism")," instead.\nFor guidance, reach out on ",(0,n.kt)("a",{parentName:"p",href:"http://slack.outerbounds.co"},"Metaflow Slack"),".")),(0,n.kt)("h2",{id:"overview"},"Overview"),(0,n.kt)("p",null,"The following walkthrough illustrates the features. For technical details and examples, refer\nto feature-specific pages below."),(0,n.kt)("h3",{id:"custom-decorators"},"Custom decorators"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Custom decorators")," allow you to lift common logic to custom step- and flow-level decorators\nwhich behave similarly to decorators provided by Metaflow. You can add logic to be executed before,\nafter, and instead of the user-defined step code. ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/custom-decorators"},"Read more about custom decorators")," and ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/advanced-custom-decorators"},"advanced decorator\npatterns"),"."),(0,n.kt)("p",null,(0,n.kt)("img",{src:o(8853).Z,width:"2403",height:"1257"})),(0,n.kt)("h3",{id:"mutators"},"Mutators"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Mutators")," allow you to add and remove decorators (including custom ones),\n",(0,n.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction"},(0,n.kt)("inlineCode",{parentName:"a"},"Config"),"s")," and\n",(0,n.kt)("a",{parentName:"p",href:"metaflow/basics#how-to-define-parameters-for-flows"},(0,n.kt)("inlineCode",{parentName:"a"},"Parameter"),"s"),"\nin flows programmatically. ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/mutators"},"Read more about\nmutators"),"."),(0,n.kt)("p",null,(0,n.kt)("img",{src:o(217).Z,width:"2381",height:"1278"})),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"Currently you are not able to alter  the flow structure - add and remove steps - through a mutator,\nbut this feature is on the roadmap.")),(0,n.kt)("h3",{id:"the-baseflow-pattern"},"The ",(0,n.kt)("inlineCode",{parentName:"h3"},"BaseFlow")," pattern"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"The ",(0,n.kt)("inlineCode",{parentName:"strong"},"BaseFlow")," pattern")," allows you apply mutators, ",(0,n.kt)("inlineCode",{parentName:"p"},"Config"),"s, and ",(0,n.kt)("inlineCode",{parentName:"p"},"Parameter"),"s automatically\nto all flows derived from the ",(0,n.kt)("inlineCode",{parentName:"p"},"BaseFlow"),". This allows you to templatize flows according to your\nproject\u2019s best practices, ensuring that all relevant decorators are applied automatically -\nwithout requiring users to remember to add them manually. ",(0,n.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/baseflow"},"Read more about\nthe ",(0,n.kt)("inlineCode",{parentName:"a"},"BaseFlow")," pattern"),"."),(0,n.kt)("p",null,(0,n.kt)("img",{src:o(3682).Z,width:"2444",height:"1265"})))}u.isMDXComponent=!0},8853:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/custom-decos-1-a31dd99e3d7f28a7e23fa0fbe285fcf5.png"},217:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/custom-decos-2-04f8d4df8a0abf2da4ff86b3ee6df2cc.png"},3682:(e,t,o)=>{o.d(t,{Z:()=>a});const a=o.p+"assets/images/custom-decos-3-18a9fb2ce2674d587be54213cdebc63d.png"}}]);