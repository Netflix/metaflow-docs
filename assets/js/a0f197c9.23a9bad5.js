"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3580],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(t),u=r,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var a=t(7462),r=(t(7294),t(3905));const o={},i="Conda vs. PyPI",p={unversionedId:"scaling/dependencies/conda-vs-pypi",id:"scaling/dependencies/conda-vs-pypi",title:"Conda vs. PyPI",description:"[The Python package ecosystem can",source:"@site/docs/scaling/dependencies/conda-vs-pypi.md",sourceDirName:"scaling/dependencies",slug:"/scaling/dependencies/conda-vs-pypi",permalink:"/scaling/dependencies/conda-vs-pypi",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/dependencies/conda-vs-pypi.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Using uv",permalink:"/scaling/dependencies/uv"},next:{title:"Defining Custom Images",permalink:"/scaling/dependencies/containers"}},s={},l=[{value:"Virtual environments",id:"virtual-environments",level:2},{value:"Which repository to use?",id:"which-repository-to-use",level:2}],c={toc:l};function d(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conda-vs-pypi"},"Conda vs. PyPI"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://packaging.python.org/en/latest/overview/"},"The Python package ecosystem can\nfeel overly complex and\nconfusing")," at\ntimes. On top of this, modern ML libraries like PyTorch consists of\nmillions of lines of code, requiring carefully compiled components\nthat match GPU drivers. In general, managing dependencies of a\nproduction-grade ML project is a hairy problem, which Metaflow\nmakes more manageable."),(0,r.kt)("p",null,"Let's start by outlining the two major components of the package ecosystem:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"A package repository")," - a collection of prepackaged software,\ncarefully curated and maintained by the open-source community and\ncompanies contributing to it. Python has two major repositories,\n",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/"},"PyPI")," and ",(0,r.kt)("a",{parentName:"p",href:"https://conda-forge.org/"},"Conda"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"A package manager")," - a tool that downloads packages from a\nrepository and installs them locally. The tools are often specific\nto a repository. For instance, ",(0,r.kt)("inlineCode",{parentName:"p"},"uv"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"poetry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"pipenv")," work\nwith PyPI and ",(0,r.kt)("inlineCode",{parentName:"p"},"mamba")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"conda")," with Conda."))),(0,r.kt)("p",null,"Much confusion arises from the fact that there are many ",(0,r.kt)("em",{parentName:"p"},"package managers"),",\nand new ones pop up periodically, but the package repositories are\nmuch fewer and much more stable. This figure illustrates the concepts:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"package ecosystem",src:t(738).Z,width:"1000",height:"532"})),(0,r.kt)("p",null,"Metaflow works with both the ",(0,r.kt)("em",{parentName:"p"},"repositories")," through ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"the\n",(0,r.kt)("inlineCode",{parentName:"a"},"@pypi")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"@conda"))," decorators.\nImportantly, when using these decorators, you don't need to use\n",(0,r.kt)("em",{parentName:"p"},"package managers")," manually as Metaflow acts as a package manager by itself.\nAlternatively, an increasily popular approach in the Python ecosystem is\nto use ",(0,r.kt)("inlineCode",{parentName:"p"},"uv")," as a package and project manager - and ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies/uv"},"Metaflow\nintegrates with this approach natively"),"."),(0,r.kt)("h2",{id:"virtual-environments"},"Virtual environments"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/venv.html"},(0,r.kt)("em",{parentName:"a"},"Virtual environments")),"\nare a concept closely related to package managers. In\nshort, often it is not desirable to install all packages in the same\nenvironment, which can lead to dependency conflicts and other problems.\nInstead, you can create isolated sets of packages, each living in their own\nenvironment."),(0,r.kt)("p",null,"Some package managers like ",(0,r.kt)("inlineCode",{parentName:"p"},"pip")," don't manage virtual environments but they rely\non another tool, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"uv"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"venv")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"pyenv"),", to do the job. Others like\n",(0,r.kt)("inlineCode",{parentName:"p"},"poetry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"mamba")," handle virtual environments natively, allowing you to\ncreate and delete environments as needed."),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@conda")," in Metaflow, you don't have to worry about\nvirtual environments. The decorators will automatically create an isolated\nenvironment for every Metaflow step, removing the need to manage environments\nmanually."),(0,r.kt)("h2",{id:"which-repository-to-use"},"Which repository to use?"),(0,r.kt)("p",null,"Why does Python have two repositories in the first place? The crucial difference\nbetween the repositories is that Conda is not specific to Python: It can handle\nany libraries and packages, even those written in low-level languages like C or\nC++. This is particularly important for ML and AI workloads that depend on\nhigh-performance libraries."),(0,r.kt)("p",null,"In contrast, PyPI is the defacto main repository for pure Python packages. It can\nalso handle non-Python dependencies but with more limitations compared to Conda."),(0,r.kt)("p",null,"Hence the choice is often simple:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If you can find packages you need at ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org"},"PyPI"),",\nyou can ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install")," them without trouble,\n",(0,r.kt)("inlineCode",{parentName:"p"},"@pypi")," is a safe bet.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If your needs are more complex, possibly including non-Python binaries\nsuch as ",(0,r.kt)("a",{parentName:"p",href:"https://anaconda.org/conda-forge/openmpi-mpifort"},"MPI"),", go with\n",(0,r.kt)("inlineCode",{parentName:"p"},"@conda"),"."))),(0,r.kt)("p",null,"Both the decorators support private packages published in private software\nrepositories, in case you want to access internally published libraries in\nMetaflow."),(0,r.kt)("p",null,"Behind the scenes, Metaflow does much more than just wrapping CLI commands\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"pip install")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"conda install"),", which wouldn't be sufficient to\nguarantee reproducible, reliable exeuction environments. To learn more,\nsee ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies/internals"},"Packaging Internals"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It is sometimes necessary to install both PyPI and Conda packages in the same\nenvironment. This is not supported by the built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@conda")," decorators\ncurrently. Should you come across this requirement, you can try ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries#alternative-pypi-and-conda-decorators"},"an alternative ",(0,r.kt)("inlineCode",{parentName:"a"},"@pypi"),"\ndecorator by Netflix"),"\nwhich supports this feature.")))}d.isMDXComponent=!0},738:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/repositories-f2b15216599984f73e6255eb297fedbe.png"}}]);