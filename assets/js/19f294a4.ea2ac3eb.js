"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4316],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8034:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={},o="Using Spot Instances",s={unversionedId:"scaling/remote-tasks/spot-instances",id:"scaling/remote-tasks/spot-instances",title:"Using Spot Instances",description:"Metaflow supports running tasks on spot instances, which can significantly",source:"@site/docs/scaling/remote-tasks/spot-instances.md",sourceDirName:"scaling/remote-tasks",slug:"/scaling/remote-tasks/spot-instances",permalink:"/scaling/remote-tasks/spot-instances",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/remote-tasks/spot-instances.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Using Multiple CPU Cores",permalink:"/scaling/remote-tasks/multicore"},next:{title:"Controlling Parallelism",permalink:"/scaling/remote-tasks/controlling-parallelism"}},p={},l=[{value:"Retrying and resuming tasks running on spot instances",id:"retrying-and-resuming-tasks-running-on-spot-instances",level:2},{value:"Graceful handling of spot instance interruptions",id:"graceful-handling-of-spot-instance-interruptions",level:2},{value:"Testing Spot Instance Interruptions",id:"testing-spot-instance-interruptions",level:2},{value:"Spot Instance Metadata",id:"spot-instance-metadata",level:2}],c={toc:l};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-spot-instances"},"Using Spot Instances"),(0,a.kt)("p",null,"Metaflow supports running tasks on spot instances, which can significantly\nreduce compute costs. Spot instances are spare compute capacity offered at a\ndiscounted price compared to on-demand instances. However, these instances can\nbe interrupted with a short notice when the cloud provider needs the capacity\nback."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Spot instance support is currently only available with ",(0,a.kt)("inlineCode",{parentName:"p"},"@kubernetes")," decorator on AWS.")),(0,a.kt)("h2",{id:"retrying-and-resuming-tasks-running-on-spot-instances"},"Retrying and resuming tasks running on spot instances"),(0,a.kt)("p",null,"Spot instances are inherently unpredictable and may be terminated at any time. To\nensure automatic recovery from failures, use ",(0,a.kt)("a",{parentName:"p",href:"/scaling/failures#retrying-tasks-with-the-retry-decorator"},"the ",(0,a.kt)("inlineCode",{parentName:"a"},"@retry"),"\ndecorator")," when working\nwith spot instances."),(0,a.kt)("p",null,"Also take a look how ",(0,a.kt)("a",{parentName:"p",href:"/scaling/checkpoint/introduction"},(0,a.kt)("inlineCode",{parentName:"a"},"@checkpoint")," can help you to resume interrupted\ncomputation"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"@checkpoint")," ",(0,a.kt)("a",{parentName:"p",href:"https://outerbounds.com/blog/indestructible-training-with-checkpoint"},"announcement blog\npost")," includes\nan example showing how to use ",(0,a.kt)("inlineCode",{parentName:"p"},"@checkpoint")," effectively on spot instaces."),(0,a.kt)("h2",{id:"graceful-handling-of-spot-instance-interruptions"},"Graceful handling of spot instance interruptions"),(0,a.kt)("p",null,"When running on spot instances, your code should be designed to handle\npotential interruptions gracefully. Metaflow provides built-in support for\ndetecting spot instance termination notices through the\n",(0,a.kt)("inlineCode",{parentName:"p"},"current.spot_termination_notice")," path. When the cloud provider decides to\nreclaim the spot instance, Metaflow will create this file, giving your task\ntime to clean up before the instance is terminated."),(0,a.kt)("p",null,"Here's an example that demonstrates how to implement a long-running task that gracefully handles spot instance interruptions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport time\nfrom metaflow import FlowSpec, step, kubernetes, current\n\n\nclass SpotInterruptionFlow(FlowSpec):\n\n    @kubernetes(node_selector={"node_type": "spot"})\n    @step\n    def start(self):\n        print("Starting long-running task...")\n        start_time = time.time()\n\n        try:\n            # Run for 5 minutes or until interrupted\n            while time.time() - start_time < 300:  # 5 minutes\n                if os.path.exists(current.spot_termination_notice):\n                    print("SPOT TERMINATION DETECTED...")\n                    break\n\n                seconds_elapsed = (time.time() - start_time)\n                print(f"Task running for {seconds_elapsed:.1f} seconds...")\n\n                time.sleep(1)  # Status update every 1 second\n        except KeyboardInterrupt:\n            print("Task was interrupted!")\n\n        print("Task completed or interrupted.")\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == \'__main__\':\n    SpotInterruptionFlow()\n')),(0,a.kt)("p",null,"In this example, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@kubernetes")," decorator with a ",(0,a.kt)("inlineCode",{parentName:"p"},'node_selector:\n{"node_type": "spot"}')," to schedule our task on spot instances. Note that this\nrequires a spot node group labeled with ",(0,a.kt)("inlineCode",{parentName:"p"},"node_type: spot")," to already exist in\nyour Kubernetes cluster. The code periodically checks for the existence of a\ntermination notice file using ",(0,a.kt)("inlineCode",{parentName:"p"},"current.spot_termination_notice"),". When a\ntermination notice is detected, the task can perform any necessary cleanup and\ncheckpointing before the instance is reclaimed."),(0,a.kt)("h2",{id:"testing-spot-instance-interruptions"},"Testing Spot Instance Interruptions"),(0,a.kt)("p",null,"You can use the AWS FIS (Fault Injection Service) to test how your tasks handle spot instance\ninterruptions. The AWS console provides an interface to initiate spot instance interruptions for\ntesting purposes."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(5084).Z,width:"2476",height:"458"})),(0,a.kt)("h2",{id:"spot-instance-metadata"},"Spot Instance Metadata"),(0,a.kt)("p",null,"When a termination notice is received, Metaflow populates the following metadata fields:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field"),(0,a.kt)("th",{parentName:"tr",align:null},"Example Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"spot-termination-received-at"),(0,a.kt)("td",{parentName:"tr",align:null},"2025-01-16T22:15:50Z")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"spot-termination-time"),(0,a.kt)("td",{parentName:"tr",align:null},"2025-01-16T22:17:47Z")))))}u.isMDXComponent=!0},5084:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/aws-spot-interruption-488511a3102701cd1f15d6435a70f68c.png"}}]);