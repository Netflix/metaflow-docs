"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5411],{1077:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var i=n(7462),a=(n(7294),n(3905)),o=n(2004);const l={},r="Debugging Flows",s={unversionedId:"metaflow/debugging",id:"metaflow/debugging",title:"Debugging Flows",description:"Metaflow wants to make debugging failed flows as painless as possible.",source:"@site/docs/metaflow/debugging.md",sourceDirName:"metaflow",slug:"/metaflow/debugging",permalink:"/metaflow/debugging",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/debugging.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Deploying Flows Programmatically",permalink:"/metaflow/managing-flows/deployer"},next:{title:"Visualizing Results",permalink:"/metaflow/visualizing-results/"}},u={},d=[{value:"How to debug failed flows",id:"how-to-debug-failed-flows",level:2},{value:"How to use the <code>resume</code> command",id:"how-to-use-the-resume-command",level:3},{value:"Resuming from an arbitrary step",id:"resuming-from-an-arbitrary-step",level:3},{value:"Resume and parameters and configs",id:"resume-and-parameters-and-configs",level:3},{value:"Reproducing production issues locally",id:"reproducing-production-issues-locally",level:3},{value:"Inspecting data with a notebook",id:"inspecting-data-with-a-notebook",level:2},{value:"Debugging your Flow code using an IDE",id:"debugging-your-flow-code-using-an-ide",level:2},{value:"Debugging with PyCharm",id:"debugging-with-pycharm",level:3},{value:"Debugging with VSCode",id:"debugging-with-vscode",level:3},{value:"Combining debugging with resume",id:"combining-debugging-with-resume",level:3},{value:"Compatibility with Conda decorator",id:"compatibility-with-conda-decorator",level:3}],p={toc:d};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"debugging-flows"},"Debugging Flows"),(0,a.kt)("p",null,"Metaflow wants to make debugging failed flows as painless as possible."),(0,a.kt)("p",null,"Debugging issues during development is a normal part of the development process. You\nshould be able to develop and debug your Metaflow scripts similar to how you develop any\nPython scripts locally."),(0,a.kt)("p",null,"Debugging a failure can either happen ",(0,a.kt)("strong",{parentName:"p"},"after")," a failed execution or ",(0,a.kt)("strong",{parentName:"p"},"during"),"\nexecution. In the first case, Metaflow provides two mechanisms:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("a",{parentName:"li",href:"debugging#how-to-debug-failed-flows"},"ability to resume a flow"),", re-executing all\nsuccessful steps and only re-executing from the failed step. This allows you to fix\nthe problem in the failed step, resume the flow and make progress."),(0,a.kt)("li",{parentName:"ul"},"the ",(0,a.kt)("a",{parentName:"li",href:"debugging#inspecting-data-with-a-notebook"},"ability to inspect the data")," produced\nby each step in a flow to be able to determine what went wrong.")),(0,a.kt)("p",null,"In the second case, Metaflow is also compatible (at least when executing locally) with\n",(0,a.kt)("a",{parentName:"p",href:"#debugging-your-flow-code-using-an-ide"},"debuggers")," which allow you to set breakpoints\ninside your step code. You will then be able to inspect and modify state and step\nthrough your code line-by-line to determine where the problem is."),(0,a.kt)("h2",{id:"how-to-debug-failed-flows"},"How to debug failed flows"),(0,a.kt)("p",null,"The process of debugging failed flows is similar both for development-time and\nproduction-time issues:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Identify the step that failed. The failed step is reported as the last line of the\nerror report where it is easy to spot."),(0,a.kt)("li",{parentName:"ol"},"Identify the run id of the failed run. On the console output, each line is prefixed\nwith an identifier like ",(0,a.kt)("inlineCode",{parentName:"li"},"2/start/21426"),". Here, ",(0,a.kt)("inlineCode",{parentName:"li"},"2")," is the run id, ",(0,a.kt)("inlineCode",{parentName:"li"},"start")," is the step\nname, and ",(0,a.kt)("inlineCode",{parentName:"li"},"21426")," is the task id."),(0,a.kt)("li",{parentName:"ol"},"Reproduce the failed run with ",(0,a.kt)("inlineCode",{parentName:"li"},"resume")," as ",(0,a.kt)("a",{parentName:"li",href:"debugging#how-to-use-the-resume-command"},"described\nbelow"),". Confirm that the error message you\nget locally matches to the original error message."),(0,a.kt)("li",{parentName:"ol"},"Identify the failed logic inside the failed step. You can do this by adding ",(0,a.kt)("inlineCode",{parentName:"li"},"print"),"\nstatements in the step until ",(0,a.kt)("inlineCode",{parentName:"li"},"resume")," reveals enough information. Alternatively, you\ncan reproduce the faulty logic in a notebook using input data artifacts for the step,\nas described below in the section about\n",(0,a.kt)("a",{parentName:"li",href:"debugging#inspecting-data-with-a-notebook"},"notebooks"),"."),(0,a.kt)("li",{parentName:"ol"},"Confirm that the fix works with ",(0,a.kt)("inlineCode",{parentName:"li"},"resume"),". Return to 4 if the error has not been\nfixed."),(0,a.kt)("li",{parentName:"ol"},"When the step works locally, rerun the whole flow from ",(0,a.kt)("inlineCode",{parentName:"li"},"start")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"end")," and confirm\nthat the fix works as intended.")),(0,a.kt)("h3",{id:"how-to-use-the-resume-command"},"How to use the ",(0,a.kt)("inlineCode",{parentName:"h3"},"resume")," command"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," command allows you to resume execution of a past run at a failed step.\nResuming makes it easy to quickly reproduce the failure and iterate on the step code\nuntil a fix has been found."),(0,a.kt)("p",null,"Here is how it works. First, save the snippet below :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step\n\nclass DebugFlow(FlowSpec):\n\n    @step\n    def start(self):\n        self.next(self.a, self.b)\n\n    @step\n    def a(self):\n        self.x = 1\n        self.next(self.join)\n\n    @step\n    def b(self):\n        self.x = int('2fail')\n        self.next(self.join)\n\n    @step\n    def join(self, inputs):\n        print('a is %s' % inputs.a.x)\n        print('b is %s' % inputs.b.x)\n        print('total is %d' % sum(input.x for input in inputs))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    DebugFlow()\n")),(0,a.kt)("p",null,"Run the script with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python debug.py run\n")),(0,a.kt)("p",null,"The run should fail. The output should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"...\n2018-01-27 22:59:40.313 [3/b/21638 (pid 13720)] File \"debug.py\", line 17, in b\n2018-01-27 22:59:40.313 [3/b/21638 (pid 13720)] self.x = int('2fail')\n2018-01-27 22:59:40.314 [3/b/21638 (pid 13720)] ValueError: invalid literal for int() with base 10: '2fail'\n2018-01-27 22:59:40.314 [3/b/21638 (pid 13720)]\n2018-01-27 22:59:40.361 [3/a/21637 (pid 13719)] Task finished successfully.\n2018-01-27 22:59:40.362 [3/b/21638 (pid 13720)] Task failed.\n2018-01-27 22:59:40.362 Workflow failed.\n    Step failure:\n    Step b (task-id 21638) failed.\n")),(0,a.kt)("p",null,"This shows that the step ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," of the run ",(0,a.kt)("inlineCode",{parentName:"p"},"3")," failed. In your case, the run id could be\ndifferent."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," command runs the flow similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"run"),". However, in contrast to ",(0,a.kt)("inlineCode",{parentName:"p"},"run"),"\nresuming reuses results of every successful step instead of actually running them."),(0,a.kt)("p",null,"Try it with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python debug.py resume\n")),(0,a.kt)("p",null,"Metaflow remembers the run number of the last local run, which in this case is ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),", so\nyou should see ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," reusing results of the run above. Since we have not changed\nanything yet, you should see the above error again but with an incremented run number."),(0,a.kt)("p",null,"You can also resume a specific run using the CLI option ",(0,a.kt)("inlineCode",{parentName:"p"},"--origin-run-id")," if you don't\nlike the default value selected by Metaflow. To get the same behavior as above, you can\nalso do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python debug.py resume --origin-run-id 3\n")),(0,a.kt)("p",null,"If you'd like programmatic access to the ",(0,a.kt)("inlineCode",{parentName:"p"},"--origin-run-id")," selected for the ",(0,a.kt)("inlineCode",{parentName:"p"},"resume"),"\n(either implicitly selected by Metaflow as last ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," invocation, or explicitly declared\nby the user via the CLI), you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"current")," singleton. Read more\n",(0,a.kt)("a",{parentName:"p",href:"/scaling/tagging#accessing-current-ids-in-a-flow"},"here"),"."),(0,a.kt)("p",null,"Next, fix the error by replacing ",(0,a.kt)("inlineCode",{parentName:"p"},"int('2fail')")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"debug.py")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"int('2')"),". Try again\nafter the fix. This time, you should see the flow completing successfully."),(0,a.kt)("p",null,"Resuming uses the flow and step names to decide what results can be reused. This means\nthat the results of previously successful steps will get reused even if you change their\nstep code. You can add new steps and alter code of failed steps safely with ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")),(0,a.kt)("h3",{id:"resuming-from-an-arbitrary-step"},"Resuming from an arbitrary step"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," resumes from the step that failed, like ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," above. Sometimes fixing\nthe failed step requires re-execution of some steps that precede it."),(0,a.kt)("p",null,"You can choose the step to resume from by specifying the step name on the command line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python debug.py resume start\n")),(0,a.kt)("p",null,"This would resume execution from the step ",(0,a.kt)("inlineCode",{parentName:"p"},"start"),". If you specify a step that comes\nafter the step that failed, execution resumes from the failed step - you can't skip over\nsteps."),(0,a.kt)("h3",{id:"resume-and-parameters-and-configs"},"Resume and parameters and configs"),(0,a.kt)("p",null,"If your flow has ",(0,a.kt)("a",{parentName:"p",href:"basics#how-to-define-parameters-for-flows"},(0,a.kt)("inlineCode",{parentName:"a"},"Parameters")),", you can't\nchange their values when resuming. Changing parameter values could change the results of\nany steps, including those that ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," skips over, which could result to unexpected\nbehavior in subsequent steps."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," command reuses the parameter values that you set with ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," originally. The\nsame logic applies for ",(0,a.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction"},(0,a.kt)("inlineCode",{parentName:"a"},"Configs"))," - when\nresuming, the configs included in the original run are used instead of the latest files."),(0,a.kt)("p",null,"This helps reproduce issues in the original run, even if you don't remember\n(or have access to) the original configs used."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that changes in config files are not applied in ",(0,a.kt)("inlineCode",{parentName:"p"},"resume"),"d runs. Original\nconfigs assigned to the run specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"--origin-run-id")," are used instead.")),(0,a.kt)("h3",{id:"reproducing-production-issues-locally"},"Reproducing production issues locally"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resume")," command can come in handy when debugging failed production runs too. This\nworks exactly the same way as described above: Just specify a production run ID as the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--origin-run-id"),". Crucially, the resumed producation run executes in your own\nnamespace, so it doesn't affect other production runs directly, making it safe to debug,\ntest, and iterate on issues locally."),(0,a.kt)("p",null,"Here's a high-level recipe:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"You deploy a flow to ",(0,a.kt)("a",{parentName:"li",href:"/production/introduction"},"a production workflow orchestrator"),"\nsupported by Metaflow."),(0,a.kt)("li",{parentName:"ol"},"A production run fails. Note its run ID, ",(0,a.kt)("inlineCode",{parentName:"li"},"R"),"."),(0,a.kt)("li",{parentName:"ol"},"To debug the issue, you resume the failed run locally with ",(0,a.kt)("inlineCode",{parentName:"li"},"resume --origin-run-id\nR"),"."),(0,a.kt)("li",{parentName:"ol"},"You can repeat (3) until the issue has been fixed."),(0,a.kt)("li",{parentName:"ol"},"Once the issue has been fixed, you deploy the fixed version to production and\nrestart the production run.")),(0,a.kt)("p",null,"To apply the above recipe on your orchestrator of choice, see the following sections:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/production/scheduling-metaflow-flows/scheduling-with-argo-workflows#reproducing-failed-production-runs"},"Resuming with Argo\nWorkflows")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/production/scheduling-metaflow-flows/scheduling-with-aws-step-functions#reproducing-failed-production-runs"},"Resuming with AWS Step\nFunctions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/production/scheduling-metaflow-flows/scheduling-with-airflow#reproducing-failed-production-runs"},"Resuming with Apache\nAirflow"))),(0,a.kt)("h2",{id:"inspecting-data-with-a-notebook"},"Inspecting data with a notebook"),(0,a.kt)("p",null,"The above example demonstrates a trivial error. In the real life, errors can be much\ntrickier to debug. In the case of machine learning, a flow may fail because of an\nunexpected distribution of input data, although nothing is wrong with the code per se."),(0,a.kt)("p",null,"Being able to inspect data produced by every step is a powerful feature of Metaflow\nwhich can help in situations like this."),(0,a.kt)("p",null,"This clip (no audio) demonstrates inspecting values in a flow:"),(0,a.kt)("div",{style:{position:"relative",width:"100%",height:500}},(0,a.kt)("iframe",{src:"https://cdn.iframe.ly/3Ffh7OX",style:{top:0,left:0,width:"100%",height:"100%",position:"absolute",border:0},allowfullscreen:"",scrolling:"no",allow:"accelerometer *; clipboard-write *; encrypted-media *; gyroscope *; picture-in-picture *;"})),(0,a.kt)("p",null,"In the above clip, you will see:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In the flow from the ",(0,a.kt)("a",{parentName:"li",href:"../getting-started/tutorials/"},"tutorials")," (",(0,a.kt)("a",{parentName:"li",href:"../getting-started/tutorials/season-1-the-local-experience/episode01"},"Episode\n1"),"), the\n",(0,a.kt)("inlineCode",{parentName:"li"},"genre_movies")," step calculates an artifact ",(0,a.kt)("inlineCode",{parentName:"li"},"movies"),". We are going to demonstrate how\nthis artifact can be inspected after the flow has executed;"),(0,a.kt)("li",{parentName:"ol"},"In a Jupyter notebook, you can list all the flows and select the latest run of the\nEpisode 1 flow;"),(0,a.kt)("li",{parentName:"ol"},"Further, you can select the ",(0,a.kt)("inlineCode",{parentName:"li"},"genre_movies")," step from this flow and inspect its value.\nAs you can see, the value computed at that step is fully available via the ",(0,a.kt)("a",{parentName:"li",href:"client"},"Client\nAPI")," and this works for any completed step even steps that completed\nsuccessfully in a failed run.")),(0,a.kt)("p",null,"For more details about the notebook API, see the ",(0,a.kt)("a",{parentName:"p",href:"client"},"Client API"),"."),(0,a.kt)("h2",{id:"debugging-your-flow-code-using-an-ide"},"Debugging your Flow code using an IDE"),(0,a.kt)("p",null,"If anything fails in your code, Metaflow prints out the normal Python stack trace\nshowing the line of code that caused the error. Typically, this error message provides\nenough information so that you can fix the code using your favorite editor."),(0,a.kt)("p",null,"Alternatively, you can use a built-in debugger available in many modern IDEs. Since\nMetaflow uses subprocesses to launch steps, the IDE may need some additional\nconfiguration to handle this properly. We detail the configuration for two popular IDEs\nhere. Other IDEs may also work similarly - let us know and we can add information about\nyour favorite tool."),(0,a.kt)("h3",{id:"debugging-with-pycharm"},"Debugging with PyCharm"),(0,a.kt)("p",null,"The following steps will allow you to debug your Flow within PyCharm:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},'In the "Run" menu, select "Edit Configurations..."'),(0,a.kt)("li",{parentName:"ol"},"Create a new configuration with the following items:",(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},'Set the "Script path" field to point to the absolute path of your Flow script'),(0,a.kt)("li",{parentName:"ol"},'Set the "Parameters" field to "run"'),(0,a.kt)("li",{parentName:"ol"},'Set the "Working directory" field to the directory containing your Flow script'))),(0,a.kt)("li",{parentName:"ol"},'You can now set your breakpoints as usual in your Flow code and select "Debug" from\nthe "Run" menu.')),(0,a.kt)("p",null,'Note that since Metaflow may launch multiple steps in parallel, you may actually hit\nmultiple breakpoints at the same time; you will be able to switch between those\nbreakpoints using the dropdown menu (it will say "MainThread"). You can also restrict\nMetaflow to only execute one step at a time by adding "--max-workers 1" to the\n"Parameters" field.'),(0,a.kt)("h3",{id:"debugging-with-vscode"},"Debugging with VSCode"),(0,a.kt)("p",null,"You can enable debugging of a Flow in VSCode by adjusting your project's configuration\nin ",(0,a.kt)("inlineCode",{parentName:"p"},".vscode/launch.json"),"."),(0,a.kt)("p",null,"Here is a recording of the end-to-end setup process:"),(0,a.kt)(o.Z,{controls:!0,url:"https://www.youtube.com/watch?v=xWGxDeojqeM",mdxType:"ReactPlayer"}),(0,a.kt)("p",null,"The configuration file as illustrated in the recording is provided below. Make sure you\nare extra careful to update the json structure appropriately if you already have\nexisting settings."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "version": "0.2.0",\n    "configurations": [\n        {\n            "name": "Metaflow Debug",\n            "type": "python",\n            "request": "launch",\n            "program": "${file}",\n            "args": [\n                "run"\n            ],\n            "env": {\n                "USERNAME": "hamel"\n            },\n            "subProcess": true,\n            "console": "integratedTerminal"\n        }\n    ]\n}\n')),(0,a.kt)("p",null,'You can now set breakpoints and then select "Start Debugging" from the "Debug" menu or\ncommand pallete as illustrated in the recording. Note that since Metaflow may launch\nmultiple steps in parallel, you may actually hit multiple breakpoints at the same time;\nyou will be able to switch between those breakpoints by selecting the proper function\nstack in the "Call Stack" window. You can also restrict Metaflow to only execute one\nstep at a time by adding the values "--max-workers" and "1" to the "args" array in the\nconfiguration.'),(0,a.kt)("h3",{id:"combining-debugging-with-resume"},"Combining debugging with resume"),(0,a.kt)("p",null,'You can naturally combine the techniques described in this section with the "resume"\ncommand described previously. Instead of passing "run" as the program argument, simply\npass "resume".'),(0,a.kt)("h3",{id:"compatibility-with-conda-decorator"},"Compatibility with Conda decorator"),(0,a.kt)("p",null,"The above instructions work even if you use ",(0,a.kt)("a",{parentName:"p",href:"/scaling/dependencies#managing-dependencies-with-conda-decorator"},(0,a.kt)("inlineCode",{parentName:"a"},"@conda"),"\ndecorators")," in your\ncode; you need, however, to ensure that the ",(0,a.kt)("inlineCode",{parentName:"p"},"conda")," binary is available in your ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH"),".\nThe easiest way to do this is to set the ",(0,a.kt)("inlineCode",{parentName:"p"},"PATH")," environment variable to properly include\nthe path to the ",(0,a.kt)("inlineCode",{parentName:"p"},"conda")," binary if it is in a non-standard location. In VSCode, you can\nsimply add this value in the env section of launch.json and in PyCharm, the UI allows\nyou to set environment variables."))}h.isMDXComponent=!0}}]);