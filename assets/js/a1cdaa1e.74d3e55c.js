"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6773],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),m=o,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function m(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4025:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=a(7462),o=(a(7294),a(3905));const r={},l="Applying Decorators with Mutators",i={unversionedId:"metaflow/composing-flows/mutators",id:"metaflow/composing-flows/mutators",title:"Applying Decorators with Mutators",description:"The previous pages showed how to create various kinds of custom decorators.",source:"@site/docs/metaflow/composing-flows/mutators.md",sourceDirName:"metaflow/composing-flows",slug:"/metaflow/composing-flows/mutators",permalink:"/metaflow/composing-flows/mutators",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/composing-flows/mutators.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Advanced Custom Decorators",permalink:"/metaflow/composing-flows/advanced-custom-decorators"},next:{title:"The BaseFlow Pattern",permalink:"/metaflow/composing-flows/baseflow"}},s={},p=[{value:"Defining a flow mutator",id:"defining-a-flow-mutator",level:2},{value:"How to handle duplicate decorators",id:"how-to-handle-duplicate-decorators",level:3},{value:"Introspecting a flow and applying configs",id:"introspecting-a-flow-and-applying-configs",level:2},{value:"Applying multiple decorators with a step mutator",id:"applying-multiple-decorators-with-a-step-mutator",level:2}],d={toc:p};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"applying-decorators-with-mutators"},"Applying Decorators with Mutators"),(0,o.kt)("p",null,"The previous pages showed how to create various kinds of custom decorators.\n",(0,o.kt)("strong",{parentName:"p"},"Mutators")," operate at a higher level: they let you programmatically ",(0,o.kt)("em",{parentName:"p"},"control\nwhich decorators and parameters are applied to your flow"),"."),(0,o.kt)("p",null,"For instance, you can use mutators to"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply stacks of decorators automatically, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"@retry")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@fallback"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create template flows that apply the right decorators automatically,\nmaybe ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction"},"based on configs"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As a foundational element of ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/baseflow"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"BaseFlow")," pattern"),"\nwhich lets you define shared, domain-specific tooling for all flows in your project, ensuring\nthat everyone follows the same path consistently."))),(0,o.kt)("p",null,"Mutators look like decorators but instead of being functions annotated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@user_step_decorator"),",\nthey are defined as classes derived from ",(0,o.kt)("inlineCode",{parentName:"p"},"FlowMutator")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"StepMutator"),", using ",(0,o.kt)("a",{parentName:"p",href:"#"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"Mutator")," API"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Unlike decorators, mutators are applied at deploy time, before a run or deployment begins.\nAs a result, they cannot modify the flow during execution.")),(0,o.kt)("h2",{id:"defining-a-flow-mutator"},"Defining a flow mutator"),(0,o.kt)("p",null,"A flow mutator can manipulate parameters of the flow and decorators attached to its steps through\na ",(0,o.kt)("inlineCode",{parentName:"p"},"MutableFlow")," object, passed to the mutator's ",(0,o.kt)("inlineCode",{parentName:"p"},"mutate")," method."),(0,o.kt)("p",null,"The following example defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"@robust_flow")," mutator which applies\n",(0,o.kt)("a",{parentName:"p",href:"/scaling/failures#retrying-tasks-with-the-retry-decorator"},"Metaflow's built-in ",(0,o.kt)("inlineCode",{parentName:"a"},"@retry")," decorator"),"\nand ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/advanced-custom-decorators#replacing-the-user-code"},"the custom ",(0,o.kt)("inlineCode",{parentName:"a"},"@fallback")," decorator"),"\nto all steps of the flow."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowMutator\nfrom fallback import fallback\n\nclass robust_flow(FlowMutator):\n    def init(self, *args, **kwargs):\n        self.disable_fallback = bool(kwargs.get("disable_fallback"))\n        self.fallback_attributes = {}\n        fallback_indicator = kwargs.get("fallback_indicator")\n        if fallback_indicator:\n            self.fallback_attributes["indicator"] = fallback_indicator\n\n    def mutate(self, mutable_flow):\n        for step_name, step in mutable_flow.steps:\n            step.add_decorator("retry", duplicates=step.IGNORE)\n            if not self.disable_fallback:\n                step.add_decorator(\n                    fallback,\n                    deco_kwargs=self.fallback_attributes,\n                    duplicates=step.IGNORE,\n                )\n\n')),(0,o.kt)("p",null,"Note the following details:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A flow-level mutator is defined in a class derived from ",(0,o.kt)("inlineCode",{parentName:"li"},"FlowMutator"),"."),(0,o.kt)("li",{parentName:"ul"},"You can capture and process attributes in the ",(0,o.kt)("inlineCode",{parentName:"li"},"init")," method - not the Python's default ",(0,o.kt)("inlineCode",{parentName:"li"},"__init__")," constructor."),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"mutate")," method to mutate the flow through the ",(0,o.kt)("inlineCode",{parentName:"li"},"mutable_flow")," handle."),(0,o.kt)("li",{parentName:"ul"},"When using mutators to add decorators, consider whether they should ",(0,o.kt)("strong",{parentName:"li"},"override")," or ",(0,o.kt)("strong",{parentName:"li"},"defer to")," the\nsame decorators added by the user. This behavior is controlled by the ",(0,o.kt)("inlineCode",{parentName:"li"},"duplicates")," argument, which is\nexplained in detail in the next section.")),(0,o.kt)("p",null,"You can test the mutator with our previously defined ",(0,o.kt)("inlineCode",{parentName:"p"},"FailFlow"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import math\nfrom metaflow import FlowSpec, step\n\nfrom robust_flow import robust_flow\n\n@robust_flow(fallback_indicator='failed')\nclass FailFlow(FlowSpec):\n\n    @step\n    def start(self):\n        x = 3\n        for i in range(5):\n            math.sqrt(x - i)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    FailFlow()\n")),(0,o.kt)("p",null,"Execute the flow without specifying any ",(0,o.kt)("inlineCode",{parentName:"p"},"--with")," options. Thanks to the decorators added by ",(0,o.kt)("inlineCode",{parentName:"p"},"@robust_flow"),", the\nrun will behave exactly the same as if it was run with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python failflow.py run --with retry --with fallback.fallback:indicator=failed\n")),(0,o.kt)("h3",{id:"how-to-handle-duplicate-decorators"},"How to handle duplicate decorators"),(0,o.kt)("p",null,"What should happen if you run the above flow, decorated with ",(0,o.kt)("inlineCode",{parentName:"p"},"@robust_flow(fallback_indicator='failed')"),", as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python failflow.py run --with fallback.fallback:indicator=step_failed\n")),(0,o.kt)("p",null,"Should the ",(0,o.kt)("inlineCode",{parentName:"p"},"indicator")," be ",(0,o.kt)("inlineCode",{parentName:"p"},"failed")," - as defined in the mutator attributes - or ",(0,o.kt)("inlineCode",{parentName:"p"},"indicator=step_failed")," as defined\non the command line?"),(0,o.kt)("p",null,"The choice depends on the policy you want to implement: Sometimes the mutator should override the user's choice,\nsometimes the opposite. You can control the behavior through the ",(0,o.kt)("inlineCode",{parentName:"p"},"duplicates")," attribute which one of the\nthree options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"IGNORE")," - the decorator added by the mutator is ignored if a user-defined decorator exists."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"OVERRIDE")," - the decorator added by the mutator overrides a user-defined decorator."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ERROR")," - adding duplicate decorators raises an error.")),(0,o.kt)("p",null,"You can test the effect of the options with ",(0,o.kt)("inlineCode",{parentName:"p"},"@robust_flow")," above. You can see the artifacts produced with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python failflow.py dump RUN_ID/start\n")),(0,o.kt)("h2",{id:"introspecting-a-flow-and-applying-configs"},"Introspecting a flow and applying configs"),(0,o.kt)("p",null,"Let's walk through a more advanced mutator that shows how you can\nutilize ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction"},(0,o.kt)("inlineCode",{parentName:"a"},"Config"),"s")," and flow introspection in mutators. We\ndevelop a flow ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Lint_(software)"},"linter")," that ensures that ",(0,o.kt)("inlineCode",{parentName:"p"},"@resources"),"\ndefined in a flow adhere to limits set in a config."),(0,o.kt)("p",null,"First, let's define a configuration that specified limits for compute resources, ",(0,o.kt)("inlineCode",{parentName:"p"},"limits.json"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n   "cpu": 2,\n   "memory": 16000,\n   "disk": 10000\n}\n')),(0,o.kt)("p",null,"This mutator reads the limits through a ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"mutable_flow.limits"),",\niterates through all decorators of each step using ",(0,o.kt)("inlineCode",{parentName:"p"},"step.decorator_specs"),", finds the ones\nwhere resource limits apply, and enforces the limits by overwriting offending decorators."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowMutator, config_expr, current\n\nclass flow_linter(FlowMutator):\n    def mutate(self, mutable_flow):\n        limits = mutable_flow.limits\n        for step_name, step in mutable_flow.steps:\n            for deco_name, _module, _args, attributes in step.decorator_specs:\n                if deco_name in ("kubernetes", "batch", "resources"):\n                    for key, limit in limits.items():\n                        val = attributes.get(key)\n                        if val and float(val) > limit:\n                            print(\n                                f"\u26a0\ufe0f  Step[{step_name}] @{deco_name}({key}={val}) "\n                                f"is higher than the limit of {limit} - fixed"\n                            )\n                            attributes[key] = limit\n                            step.add_decorator(\n                                deco_name,\n                                deco_kwargs=attributes,\n                                duplicates=step.OVERRIDE,\n                            )\n')),(0,o.kt)("p",null,"Try it with this flow:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, resources, Config\n\nfrom flow_linter import flow_linter\n\n@flow_linter\nclass HungryFlow(FlowSpec):\n\n    limits = Config('limits', default='limits.json')\n\n    @resources(cpu=16)\n    @step\n    def start(self):\n        print(self._graph_info)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    HungryFlow()\n")),(0,o.kt)("p",null,"Run the flow e.g. as"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python hungryflow.py run --with resources:memory=64000\n")),(0,o.kt)("p",null,"and notice the warnings."),(0,o.kt)("h2",{id:"applying-multiple-decorators-with-a-step-mutator"},"Applying multiple decorators with a step mutator"),(0,o.kt)("p",null,"Imagine you\u2019ve built a custom decorator that depends on third-party libraries. You could\nuse Metaflow\u2019s built-in dependency management, e.g. ",(0,o.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"a ",(0,o.kt)("inlineCode",{parentName:"a"},"@pypi"),"\ndecorator"),", to install those libraries. However, this\nrequires users to remember to apply ",(0,o.kt)("strong",{parentName:"p"},"both")," your custom decorator ",(0,o.kt)("strong",{parentName:"p"},"and")," the appropriate\n",(0,o.kt)("inlineCode",{parentName:"p"},"@pypi")," decorator, which is error-prone."),(0,o.kt)("p",null,"A better solution is to create a step mutator that adds the decorators automatically. As an example,\nlet's create a custom data access decorator that fetches a dataset, preprocesses it, and returns a\ndataframe to the user step - making sure that all necessary dependencies are installed automatically."),(0,o.kt)("p",null,"We can define a step mutator ",(0,o.kt)("inlineCode",{parentName:"p"},"@dataset")," and a decorator ",(0,o.kt)("inlineCode",{parentName:"p"},"@process_dataset")," in the same module, as they\nare tightly coupled:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import StepMutator, config_expr, current, user_step_decorator\n\nDEPS = {"duckdb": "1.3.2", "pyarrow": "20.0.0"}\n\n@user_step_decorator\ndef process_dataset(step_name, flow, inputs=None, attr=None):\n    import duckdb\n\n    sql = f"""SELECT * FROM \'{attr["url"]}\'"""\n    fltr = attr.get("filter")\n    if fltr:\n        sql += f"WHERE {fltr}"\n    con = duckdb.connect()\n    print("\ud83d\udd04 Preparing data")\n    flow.table = con.execute(sql).fetch_arrow_table()\n    print("\u2705 Data prepared")\n    yield\n    del flow.table\n\nclass dataset(StepMutator):\n    def init(self, *args, **kwargs):\n        self.url = kwargs["url"]\n        self.filter = kwargs.get("filter")\n\n    def mutate(self, mutable_step):\n        mutable_step.add_decorator(\n            "pypi", deco_kwargs={"packages": DEPS}, duplicates=mutable_step.ERROR\n        )\n        mutable_step.add_decorator(\n            process_dataset,\n            deco_kwargs={"filter": self.filter, "url": self.url},\n            duplicates=mutable_step.ERROR,\n        )\n')),(0,o.kt)("p",null,"From the user\u2019s perspective, the step mutator ",(0,o.kt)("inlineCode",{parentName:"p"},"@dataset")," behaves like a regular decorator. Its\nrole is to capture attributes such as ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"filter"),", and automatically apply two additional\ndecorators \u2014 ",(0,o.kt)("inlineCode",{parentName:"p"},"@pypi")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"@process_dataset")," \u2014 to the step where it is used."),(0,o.kt)("p",null,"After this, the ",(0,o.kt)("inlineCode",{parentName:"p"},"@process_dataset")," decorator can ",(0,o.kt)("inlineCode",{parentName:"p"},"import duckdb")," knowing that the library is\navailable. Note that we use ",(0,o.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/custom-decorators#exposing-an-api-to-the-user-code"},"the temporary artifact\npattern")," to expose\nan Arrow table, ",(0,o.kt)("inlineCode",{parentName:"p"},"flow.df"),", to the user code, but we don't persist it as an artifact."),(0,o.kt)("p",null,"Let's try ",(0,o.kt)("inlineCode",{parentName:"p"},"@dataset")," in a flow. To demonstrate another useful pattern, we load attributes from a\nconfig file, ",(0,o.kt)("inlineCode",{parentName:"p"},"dataset.json")," which can look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n   "url": "https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2020-01.parquet",\n   "filter": "tip_amount > fare_amount"\n}\n')),(0,o.kt)("p",null,"..and pass them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"@dataset")," mutator:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from metaflow import FlowSpec, step, resources, Config\n\nfrom dataset import dataset\n\nclass DatasetFlow(FlowSpec):\n\n    data_config = Config('dataset', default='dataset.json')\n\n    @dataset(url=data_config.url, filter=data_config.filter)\n    @step\n    def start(self):\n        print(self.table)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    DatasetFlow()\n")),(0,o.kt)("p",null,"Note that you can apply step mutators with ",(0,o.kt)("inlineCode",{parentName:"p"},"--with"),", similar to decorators:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python datasetflow.py --environment=pypi run --with 'dataset.dataset:url=SOME_URL'\n")),(0,o.kt)("p",null,"The internals of ",(0,o.kt)("inlineCode",{parentName:"p"},"@dataset")," are fully encapsulated - users don\u2019t need to worry about\ninstalling ",(0,o.kt)("inlineCode",{parentName:"p"},"duckdb")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"pyarrow")," themselves, or even know that ",(0,o.kt)("inlineCode",{parentName:"p"},"duckdb")," is used."))}u.isMDXComponent=!0}}]);