"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9936],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>g});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},f={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=o,m=d["".concat(c,".").concat(g)]||d[g]||f[g]||i;return t?n.createElement(m,a(a({ref:r},p),{},{components:t})):n.createElement(m,a({ref:r},p))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7981:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=t(7462),o=(t(7294),t(3905));const i={},a="@trigger_on_finish",s={unversionedId:"api/flow-decorators/trigger_on_finish",id:"api/flow-decorators/trigger_on_finish",title:"@trigger_on_finish",description:"Use the @triggeronfinish decorator to trigger a flow deployed on Argo Workflows when another flow finishes.",source:"@site/docs/api/flow-decorators/trigger_on_finish.md",sourceDirName:"api/flow-decorators",slug:"/api/flow-decorators/trigger_on_finish",permalink:"/api/flow-decorators/trigger_on_finish",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/flow-decorators/trigger_on_finish.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"@trigger",permalink:"/api/flow-decorators/trigger"},next:{title:"Release Notes",permalink:"/internals/release-notes"}},c={},l=[],p=e=>function(r){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",r)},f=p("DocSection"),d=p("SigArgSection"),g=p("SigArg"),m=p("Description"),u=p("ParamSection"),h=p("Parameter"),w={toc:l};function y(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},w,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"trigger_on_finish"},"@trigger_on_finish"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@trigger_on_finish")," decorator to trigger a flow ",(0,o.kt)("a",{parentName:"p",href:"/production/scheduling-metaflow-flows/scheduling-with-argo-workflows"},"deployed on Argo Workflows")," when another flow finishes."),(0,o.kt)("p",null,"Read more in ",(0,o.kt)("a",{parentName:"p",href:"/production/event-triggering/flow-events"},"Triggering Flows Based on Other Flows"),"."),(0,o.kt)(f,{type:"decorator",name:"trigger_on_finish",module:"metaflow",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/events_decorator.py#L308",mdxType:"DocSection"},(0,o.kt)(d,{mdxType:"SigArgSection"},(0,o.kt)(g,{name:"...",mdxType:"SigArg"})),(0,o.kt)(m,{summary:"Specifies the flow(s) that this flow depends on.",extended_summary:"```\\n@trigger_on_finish(flow='FooFlow')\\n```\\nor\\n```\\n@trigger_on_finish(flows=['FooFlow', 'BarFlow'])\\n```\\nThis decorator respects the @project decorator and triggers the flow\\nwhen upstream runs within the same namespace complete successfully\\n\\nAdditionally, you can specify project aware upstream flow dependencies\\nby specifying the fully qualified project_flow_name.\\n```\\n@trigger_on_finish(flow='my_project.branch.my_branch.FooFlow')\\n```\\nor\\n```\\n@trigger_on_finish(flows=['my_project.branch.my_branch.FooFlow', 'BarFlow'])\\n```\\n\\nYou can also specify just the project or project branch (other values will be\\ninferred from the current project or project branch):\\n```\\n@trigger_on_finish(flow={\"name\": \"FooFlow\", \"project\": \"my_project\", \"project_branch\": \"branch\"})\\n```\\n\\nNote that `branch` is typically one of:\\n  - `prod`\\n  - `user.bob`\\n  - `test.my_experiment`\\n  - `prod.staging`",mdxType:"Description"}),(0,o.kt)(u,{name:"Parameters",mdxType:"ParamSection"},(0,o.kt)(h,{name:"flow",type:"Union[str, Dict[str, str]], optional, default None",desc:"Upstream flow dependency for this flow.",mdxType:"Parameter"}),(0,o.kt)(h,{name:"flows",type:"List[Union[str, Dict[str, str]]], default []",desc:"Upstream flow dependencies for this flow.",mdxType:"Parameter"}),(0,o.kt)(h,{name:"options",type:"Dict[str, Any], default {}",desc:"Backend-specific configuration for tuning eventing behavior.",mdxType:"Parameter"}))))}y.isMDXComponent=!0}}]);