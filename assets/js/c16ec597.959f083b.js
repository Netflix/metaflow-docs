"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1328],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||f[m]||i;return t?a.createElement(g,r(r({ref:n},c),{},{components:t})):a.createElement(g,r({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1154:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),o=(t(7294),t(3905));const i={},r="Parsing Configs",s={unversionedId:"metaflow/configuring-flows/parsing-configs",id:"metaflow/configuring-flows/parsing-configs",title:"Parsing Configs",description:"All the basic configuration examples we discussed relied on a single JSON file",source:"@site/docs/metaflow/configuring-flows/parsing-configs.md",sourceDirName:"metaflow/configuring-flows",slug:"/metaflow/configuring-flows/parsing-configs",permalink:"/metaflow/configuring-flows/parsing-configs",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/configuring-flows/parsing-configs.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Basic Configuration",permalink:"/metaflow/configuring-flows/basic-configuration"},next:{title:"Custom Config Parsers",permalink:"/metaflow/configuring-flows/custom-parsers"}},l={},p=[{value:"Using common formats like <code>TOML</code> and <code>YAML</code>",id:"using-common-formats-like-toml-and-yaml",level:2},{value:"Loading YAML",id:"loading-yaml",level:3},{value:"Validating configs with <code>pydantic</code>",id:"validating-configs-with-pydantic",level:2},{value:"Advanced configurations with <code>OmegaConf</code>",id:"advanced-configurations-with-omegaconf",level:2}],c={toc:p};function f(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"parsing-configs"},"Parsing Configs"),(0,o.kt)("p",null,"All the ",(0,o.kt)("a",{parentName:"p",href:"basic-configuration"},"basic configuration")," examples we discussed relied on a single JSON file\nfor defining the configuration. This page covers scenarios involving alternative formats and more\nadvanced configurations."),(0,o.kt)("p",null,"To support diverse config formats and use cases, ",(0,o.kt)("inlineCode",{parentName:"p"},"Config")," allows you to specify a custom parser. All\nit has to do is to output a Python dictionary."),(0,o.kt)("h2",{id:"using-common-formats-like-toml-and-yaml"},"Using common formats like ",(0,o.kt)("inlineCode",{parentName:"h2"},"TOML")," and ",(0,o.kt)("inlineCode",{parentName:"h2"},"YAML")),(0,o.kt)("p",null,"To use a format other than JSON, you need to define a ",(0,o.kt)("inlineCode",{parentName:"p"},"parser")," that accepts a string (the configuration\nfile) and converts it to a Python dictionary. Luckily, common configuration formats include such a function\nout of the box."),(0,o.kt)("p",null,"For instance, this example uses a configuration file specified in ",(0,o.kt)("a",{parentName:"p",href:"https://toml.io"},"TOML"),", a pleasantly\nhuman-readable and writable format, a parser of which is ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/tomllib.html"},"included in Python since 3.11"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import pprint\nfrom metaflow import FlowSpec, step, Config, resources\n\nclass TomlConfigFlow(FlowSpec):\n    config = Config("config", default="myconfig.toml", parser="tomllib.loads")\n\n    @resources(cpu=config.resources.cpu)\n    @step\n    def start(self):\n        print("Config loaded:")\n        pprint.pp(self.config)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\n\nif __name__ == "__main__":\n    TomlConfigFlow()\n')),(0,o.kt)("p",null,"Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"parser")," is defined as a string, so you can run the flow in remote systems that\nmight not have the parser installed. There is no need to include it in ",(0,o.kt)("inlineCode",{parentName:"p"},"@pypi")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"@conda")," or the\nunderlying container images."),(0,o.kt)("p",null,"The corresponding TOML file, ",(0,o.kt)("inlineCode",{parentName:"p"},"myconfig.toml")," looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[general]\na = 5\n\n[resources]\ncpu = 1\n")),(0,o.kt)("p",null,"You can run the flow as usual, assuming you are using Python 3.11 or newer:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python toml_config.py run\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The parser needs to be available only on the system that starts a run or a deployment. Since ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),"s are\nevaluated only during the deploy-time, you don't need to have the parser available in all remote nodes."),(0,o.kt)("p",{parentName:"admonition"},"To make sure remote systems won't complain about missing imports, you can define the parser function as\na string, such as ",(0,o.kt)("inlineCode",{parentName:"p"},'"tomllib.loads"'),".")),(0,o.kt)("h3",{id:"loading-yaml"},"Loading YAML"),(0,o.kt)("p",null,"To load YAML, change the ",(0,o.kt)("inlineCode",{parentName:"p"},"Config")," line in the above example to"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'config = Config("config", default="myconfig.yml", parser="yaml.full_load")\n')),(0,o.kt)("p",null,"You can test it with a YAML file like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"resources:\n  cpu: 1\nfoo: bar\n")),(0,o.kt)("p",null,"Make sure that you have ",(0,o.kt)("a",{parentName:"p",href:"https://pypi.org/project/PyYAML/"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"pyyaml")," package")," installed before running the flow."),(0,o.kt)("h2",{id:"validating-configs-with-pydantic"},"Validating configs with ",(0,o.kt)("inlineCode",{parentName:"h2"},"pydantic")),(0,o.kt)("p",null,"Besides loading custom formats, you can use parsers to preprocess and validate configs (",(0,o.kt)("a",{parentName:"p",href:"custom-parsers"},"and much more"),"). This example uses ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pydantic.dev/"},"the popular ",(0,o.kt)("inlineCode",{parentName:"a"},"pydantic")," package")," to validate the config schema:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import json, pprint\nfrom metaflow import FlowSpec, step, Config, resources\n\ndef pydantic_parser(txt):\n    from pydantic import BaseModel, PositiveInt\n    from datetime import datetime\n\n    class ConfigSchema(BaseModel):\n        id: int\n        signup_ts: datetime | None\n        tastes: dict[str, PositiveInt]\n\n    cfg = json.loads(txt)\n    ConfigSchema.model_validate(cfg)\n    return cfg\n\nclass PydanticConfigFlow(FlowSpec):\n    config = Config("config", parser=pydantic_parser)\n\n    @step\n    def start(self):\n        print("Config loaded and validated:")\n        pprint.pp(self.config)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    PydanticConfigFlow()\n')),(0,o.kt)("p",null,"You can test validation with the following config that has a small data issue which a human can miss easily:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'python pydantic_config.py --config-value config \\\n  \'{"id": 1, "signup_ts": "2024-12-12 00:12", "tastes": {"milk": -2}}\' \\\n  run\n')),(0,o.kt)("p",null,"Pydantic spots the issue and gives a helpful error message about it before a run starts."),(0,o.kt)("h2",{id:"advanced-configurations-with-omegaconf"},"Advanced configurations with ",(0,o.kt)("inlineCode",{parentName:"h2"},"OmegaConf")),(0,o.kt)("p",null,"Thanks to custom parsers, Metaflow ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),"s work well with existing configuration frameworks like\n",(0,o.kt)("a",{parentName:"p",href:"https://omegaconf.readthedocs.io/"},"OmegaConf")," which handle advanced cases involving multiple\noverlapping configuration files, value interpolation and substitution, and schema validation out\nof the box."),(0,o.kt)("p",null,"To illustrate what is possible, consider this example that uses ",(0,o.kt)("inlineCode",{parentName:"p"},"OmegaConf")," to read a YAML ",(0,o.kt)("inlineCode",{parentName:"p"},"Config"),",\nvalues of which you can selectively override for a run with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Parameter"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import pprint\n\nfrom metaflow import FlowSpec, step, Config, Parameter\nfrom omegaconf import OmegaConf\n\ndef omega_parse(txt):\n    config = OmegaConf.create(txt)\n    return OmegaConf.to_container(config, resolve=True)\n\ndef parse_overrides(config, overrides):\n    cfg = config.to_dict()\n    if overrides:\n        base = OmegaConf.create(cfg)\n        config = OmegaConf.from_dotlist(overrides.split(","))\n        return OmegaConf.to_container(OmegaConf.merge(base, config))\n    else:\n        return cfg\n\nclass OmegaConfigFlow(FlowSpec):\n    base = Config("config", default="omega.yaml", parser=omega_parse)\n    overrides = Parameter("overrides", default="")\n\n    @step\n    def start(self):\n        self.config = parse_overrides(self.base, self.overrides)\n        pprint.pp(self.config)\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    OmegaConfigFlow()\n')),(0,o.kt)("p",null,"The example reads a YAML config as usual, but it allows the user to override any specific keys in the\nconfig using ",(0,o.kt)("inlineCode",{parentName:"p"},"OmegaConf"),"'s ",(0,o.kt)("a",{parentName:"p",href:"https://omegaconf.readthedocs.io/en/latest/usage.html#from-a-dot-list"},"support for the ",(0,o.kt)("inlineCode",{parentName:"a"},"dot-list"),"\nformat")," and ",(0,o.kt)("a",{parentName:"p",href:"https://omegaconf.readthedocs.io/en/latest/usage.html#merging-configurations"},"configuration\nmerging"),"."),(0,o.kt)("p",null,"Test this with a YAML file like below, which for illustration leverages ",(0,o.kt)("a",{parentName:"p",href:"https://omegaconf.readthedocs.io/en/latest/usage.html#variable-interpolation"},"variable\ninterpolation"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"training:\n  alpha: 0.5\n  epochs: 100\nid: training-${training.alpha}-${training.epochs}\ndataset:\n  name: myfile.txt\n  preprocess: false\n")),(0,o.kt)("p",null,"Run the flow like here, overriding two keys ",(0,o.kt)("inlineCode",{parentName:"p"},"dataset.name")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"training.epochs")," in the config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"python omega_config.py run --overrides dataset.name=newfile.txt,training.epochs=50\n")))}f.isMDXComponent=!0}}]);