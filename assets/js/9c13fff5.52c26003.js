"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7207],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(i,".").concat(f)]||m[f]||u[f]||l;return n?r.createElement(d,o(o({ref:t},c),{},{components:n})):r.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={},o="Controlling Parallelism",s={unversionedId:"scaling/remote-tasks/controlling-parallelism",id:"scaling/remote-tasks/controlling-parallelism",title:"Controlling Parallelism",description:"It is almost too easy to execute tasks remotely using Metaflow. Consider a foreach loop",source:"@site/docs/scaling/remote-tasks/controlling-parallelism.md",sourceDirName:"scaling/remote-tasks",slug:"/scaling/remote-tasks/controlling-parallelism",permalink:"/scaling/remote-tasks/controlling-parallelism",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/scaling/remote-tasks/controlling-parallelism.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Using Spot Instances",permalink:"/scaling/remote-tasks/spot-instances"},next:{title:"Using GPUs and Other Accelerators",permalink:"/scaling/remote-tasks/gpu-compute"}},i={},p=[],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"controlling-parallelism"},"Controlling Parallelism"),(0,a.kt)("p",null,"It is almost too easy to execute tasks remotely using Metaflow. Consider a foreach loop\ndefined as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"self.params = range(1000)\nself.next(self.fanned_out, foreach='params')\n")),(0,a.kt)("p",null,"When run with ",(0,a.kt)("inlineCode",{parentName:"p"},"--with batch")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--with kubernetes"),", this code would launch up to 1000\nparallel instances which may turn out to be quite expensive."),(0,a.kt)("p",null,"To safeguard against inadvertent launching of many parallel jobs, the ",(0,a.kt)("inlineCode",{parentName:"p"},"run")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"resume"),"\ncommands have a flag ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-num-splits")," which fails the task if it attempts to launch\nmore than 100 splits by default. Use the flag to increase the limit if you actually need\nmore tasks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ python myflow.py run --max-num-splits 200\n")),(0,a.kt)("p",null,"Another flag, ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-workers"),", limits the number of tasks run in parallel. Even if a\nforeach launched 100 splits, ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-workers")," would make only 16 ","(","by default",")"," of them\nrun in parallel at any point in time. If you want more parallelism, increase the value\nof ",(0,a.kt)("inlineCode",{parentName:"p"},"--max-workers"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ python myflow.py run --max-workers 32\n")))}u.isMDXComponent=!0}}]);