"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5818],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),f=p(t),u=a,d=f["".concat(s,".").concat(u)]||f[u]||m[u]||r;return t?o.createElement(d,l(l({ref:n},c),{},{components:t})):o.createElement(d,l({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=f;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6589:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var o=t(7462),a=(t(7294),t(3905));const r={},l="The BaseFlow Pattern",i={unversionedId:"metaflow/composing-flows/baseflow",id:"metaflow/composing-flows/baseflow",title:"The BaseFlow Pattern",description:"The previous sections introduced custom decorators and mutators, which let",source:"@site/docs/metaflow/composing-flows/baseflow.md",sourceDirName:"metaflow/composing-flows",slug:"/metaflow/composing-flows/baseflow",permalink:"/metaflow/composing-flows/baseflow",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/composing-flows/baseflow.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Applying Decorators with Mutators",permalink:"/metaflow/composing-flows/mutators"},next:{title:"Scalable Compute and Data",permalink:"/scaling/introduction"}},s={},p=[{value:"Defining a base flow",id:"defining-a-base-flow",level:2},{value:"Using a base flow",id:"using-a-base-flow",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-baseflow-pattern"},"The BaseFlow Pattern"),(0,a.kt)("p",null,"The previous sections introduced custom decorators and mutators, which let\nyou compose flows from reusable components. Production-grade ML and AI projects\noften consist of many such components for data access and transformation,\nquality checks, model training and inference, and publishing results -\namongst other needs."),(0,a.kt)("p",null,"It\u2019s beneficial to let end users focus on developing and iterating on\ndomain-specific logic, while minimizing visible boilerplate and project\nscaffolding. This is where ",(0,a.kt)("em",{parentName:"p"},"the BaseFlow pattern")," helps: It provides a\ncommon foundation that bundles all necessary components, making them\nreadily available to the user."),(0,a.kt)("h2",{id:"defining-a-base-flow"},"Defining a base flow"),(0,a.kt)("p",null,"A BaseFlow is a class that inherits from ",(0,a.kt)("inlineCode",{parentName:"p"},"FlowSpec")," and serves as a\nfoundation for other flows in a project. It can define shared components\nsuch as flow mutators, ",(0,a.kt)("inlineCode",{parentName:"p"},"Config"),"s, ",(0,a.kt)("inlineCode",{parentName:"p"},"Parameter"),"s, and helper methods, but not steps\nthemselves. Individual flows in the project then inherit from ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseFlow"),",\nautomatically gaining access to the common functionality and ensuring consistency\nacross flows."),(0,a.kt)("p",null,"A common feature of the BaseFlow pattern is a common configuration file that governs\nall top-level concerns of the project. For the following example, we can define a\n",(0,a.kt)("inlineCode",{parentName:"p"},"project.toml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},"name = 'myproject'\n\n# run the flow hourly\nschedule = \"0 * * * *\"\n\n[limits]\ncpu = 2\nmemory = 16000\ndisk = 10000\n")),(0,a.kt)("p",null,"We use the config to set up a base flow:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import tomllib\n\nfrom metaflow import Config, FlowSpec, project, config_expr, schedule\n\nfrom flow_linter import flow_linter\n\ndef parse_limits(x):\n    return tomllib.loads(x)['limits']\n\n@flow_linter\n@project(name=config_expr('project.name'))\n@schedule(cron=config_expr('project.schedule'))\nclass BaseFlow(FlowSpec):\n\n    project_config = Config('project', default='project.toml', parser=tomllib.loads)\n    limits = Config('limits', default='project.toml', parser=parse_limits)\n\n    def number_of_rows(self):\n        return len(self.table)\n")),(0,a.kt)("p",null,"Note the following details:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We read ",(0,a.kt)("inlineCode",{parentName:"p"},"project.toml")," as a ",(0,a.kt)("inlineCode",{parentName:"p"},"Config"),", so all its values are available for all derived flows.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We ensure that all flows use ",(0,a.kt)("inlineCode",{parentName:"p"},"@flow_linter")," which ",(0,a.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/mutators#introspecting-a-flow-and-applying-configs"},"we\ndefined previously"),",\nand use the project config to read ",(0,a.kt)("inlineCode",{parentName:"p"},"limits")," for it.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We use the config to parametrize ",(0,a.kt)("inlineCode",{parentName:"p"},"@project")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@schedule"),".")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"We define a helper method, ",(0,a.kt)("inlineCode",{parentName:"p"},"number_of_rows"),", which ",(0,a.kt)("a",{parentName:"p",href:"/metaflow/composing-flows/mutators#applying-multiple-decorators-with-a-step-mutator"},"comes in\nhandy with ",(0,a.kt)("inlineCode",{parentName:"a"},"@dataset")),"."))),(0,a.kt)("p",null,"Another common pattern is to include metadata, ",(0,a.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/custom-parsers#including-default-configs-in-flows"},"such as Git\ninformation"),", in flows\nautomatically. Depending on your needs, your ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseFlow")," can grow arbitrarily feature-rich. "),(0,a.kt)("h2",{id:"using-a-base-flow"},"Using a base flow"),(0,a.kt)("p",null,"Here is an example flow that uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseFlow")," defined above:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from baseflow import BaseFlow\nfrom metaflow import step, Config, current, resources\n\nfrom dataset import dataset\n\nclass ComposedFlow(BaseFlow):\n\n    data_config = Config('dataset', default='dataset.json')\n\n    @resources(cpu=2)\n    @dataset(url=data_config.url)\n    @step\n    def start(self):\n        print(f\"Project {current.project_name}\")\n        print(\"Number of rows:\", self.number_of_rows())\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == '__main__':\n    ComposedFlow()\n")),(0,a.kt)("p",null,"Thanks to ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseFlow"),", derived flows remain clean and minimal, despite including rich functionality under the hood, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"@project"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@schedule"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"@flow_linter"),". Shared helper methods also make it easy to equip all derived flows with common utilities, like ",(0,a.kt)("inlineCode",{parentName:"p"},"number_of_rows")," in the example above."),(0,a.kt)("p",null,"Real-world projects often involve enough complexity and nuance that a single common foundation\ncan't cover every need. Instead of aiming for perfect, all-encompassing abstractions in ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseFlow"),",\nit's better to allow derived flows to customize behavior as needed - such as with flow-specific\n",(0,a.kt)("inlineCode",{parentName:"p"},"data_config")," in the example above."))}m.isMDXComponent=!0}}]);