"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2299],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=r.createContext({}),m=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=m(a),d=o,f=u["".concat(p,".").concat(d)]||u[d]||l[d]||n;return a?r.createElement(f,s(s({ref:t},c),{},{components:a})):r.createElement(f,s({ref:t},c))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,s=new Array(n);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var m=2;m<n;m++)s[m]=a[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6593:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>n,metadata:()=>i,toc:()=>m});var r=a(7462),o=(a(7294),a(3905));const n={},s="@batch",i={unversionedId:"api/step-decorators/batch",id:"api/step-decorators/batch",title:"@batch",description:"The @batch decorator sends a step for execution on the AWS Batch compute layer. For more information, see Executing Tasks Remotely.",source:"@site/docs/api/step-decorators/batch.md",sourceDirName:"api/step-decorators",slug:"/api/step-decorators/batch",permalink:"/api/step-decorators/batch",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/api/step-decorators/batch.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"@environment",permalink:"/api/step-decorators/environment"},next:{title:"@card",permalink:"/api/step-decorators/card"}},p={},m=[],c=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",t)},l=c("DocSection"),u=c("SigArgSection"),d=c("SigArg"),f=c("Description"),h=c("ParamSection"),y=c("Parameter"),b={toc:m};function g(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"batch"},"@batch"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@batch")," decorator sends a step for execution on the ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/batch/"},"AWS Batch")," compute layer. For more information, see ",(0,o.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/introduction"},"Executing Tasks Remotely"),"."),(0,o.kt)("p",null,"Note that while ",(0,o.kt)("inlineCode",{parentName:"p"},"@batch")," doesn't allow mounting arbitrary disk volumes on the fly, you can create in-memory filesystems easily with ",(0,o.kt)("inlineCode",{parentName:"p"},"tmpfs")," options. For more details, see ",(0,o.kt)("a",{parentName:"p",href:"/scaling/data#using-metaflows3-for-in-memory-processing"},"using ",(0,o.kt)("inlineCode",{parentName:"a"},"metaflow.S3")," for in-memory processing"),"."),(0,o.kt)(l,{type:"decorator",name:"batch",module:"metaflow",show_import:"True",heading_level:"3",link:"https://github.com/Netflix/metaflow/tree/master/metaflow/plugins/aws/batch/batch_decorator.py#L31",mdxType:"DocSection"},(0,o.kt)(u,{mdxType:"SigArgSection"},(0,o.kt)(d,{name:"...",mdxType:"SigArg"})),(0,o.kt)(f,{summary:"Specifies that this step should execute on [AWS Batch](https://aws.amazon.com/batch/).",mdxType:"Description"}),(0,o.kt)(h,{name:"Parameters",mdxType:"ParamSection"},(0,o.kt)(y,{name:"cpu",type:"int, default 1",desc:"Number of CPUs required for this step. If `@resources` is\\nalso present, the maximum value from all decorators is used.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"gpu",type:"int, default 0",desc:"Number of GPUs required for this step. If `@resources` is\\nalso present, the maximum value from all decorators is used.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"memory",type:"int, default 4096",desc:"Memory size (in MB) required for this step. If\\n`@resources` is also present, the maximum value from all decorators is\\nused.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"image",type:"str, optional, default None",desc:"Docker image to use when launching on AWS Batch. If not specified, and\\nMETAFLOW_BATCH_CONTAINER_IMAGE is specified, that image is used. If\\nnot, a default Docker image mapping to the current version of Python is used.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"queue",type:"str, default METAFLOW_BATCH_JOB_QUEUE",desc:"AWS Batch Job Queue to submit the job to.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"iam_role",type:"str, default METAFLOW_ECS_S3_ACCESS_IAM_ROLE",desc:"AWS IAM role that AWS Batch container uses to access AWS cloud resources.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"execution_role",type:"str, default METAFLOW_ECS_FARGATE_EXECUTION_ROLE",desc:"AWS IAM role that AWS Batch can use [to trigger AWS Fargate tasks]\\n(https://docs.aws.amazon.com/batch/latest/userguide/execution-IAM-role.html).",mdxType:"Parameter"}),(0,o.kt)(y,{name:"shared_memory",type:"int, optional, default None",desc:"The value for the size (in MiB) of the /dev/shm volume for this step.\\nThis parameter maps to the `--shm-size` option in Docker.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"max_swap",type:"int, optional, default None",desc:"The total amount of swap memory (in MiB) a container can use for this\\nstep. This parameter is translated to the `--memory-swap` option in\\nDocker where the value is the sum of the container memory plus the\\n`max_swap` value.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"swappiness",type:"int, optional, default None",desc:"This allows you to tune memory swappiness behavior for this step.\\nA swappiness value of 0 causes swapping not to happen unless absolutely\\nnecessary. A swappiness value of 100 causes pages to be swapped very\\naggressively. Accepted values are whole numbers between 0 and 100.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"use_tmpfs",type:"bool, default False",desc:"This enables an explicit tmpfs mount for this step. Note that tmpfs is\\nnot available on Fargate compute environments",mdxType:"Parameter"}),(0,o.kt)(y,{name:"tmpfs_tempdir",type:"bool, default True",desc:"sets METAFLOW_TEMPDIR to tmpfs_path if set for this step.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"tmpfs_size",type:"int, optional, default None",desc:"The value for the size (in MiB) of the tmpfs mount for this step.\\nThis parameter maps to the `--tmpfs` option in Docker. Defaults to 50% of the\\nmemory allocated for this step.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"tmpfs_path",type:"str, optional, default None",desc:"Path to tmpfs mount for this step. Defaults to /metaflow_temp.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"inferentia",type:"int, default 0",desc:"Number of Inferentia chips required for this step.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"trainium",type:"int, default None",desc:"Alias for inferentia. Use only one of the two.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"efa",type:"int, default 0",desc:"Number of elastic fabric adapter network devices to attach to container",mdxType:"Parameter"}),(0,o.kt)(y,{name:"ephemeral_storage",type:"int, default None",desc:"The total amount, in GiB, of ephemeral storage to set for the task, 21-200GiB.\\nThis is only relevant for Fargate compute environments",mdxType:"Parameter"}),(0,o.kt)(y,{name:"log_driver: str, optional, default None",desc:"The log driver to use for the Amazon ECS container.",mdxType:"Parameter"}),(0,o.kt)(y,{name:"log_options: List[str], optional, default None",desc:"List of strings containing options for the chosen log driver. The configurable values\\ndepend on the `log driver` chosen. Validation of these options is not supported yet.\\nExample: [`awslogs-group:aws/batch/job`]",mdxType:"Parameter"}))))}g.isMDXComponent=!0}}]);