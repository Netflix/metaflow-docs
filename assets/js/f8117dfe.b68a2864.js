"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2241],{3524:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=t(7462),i=(t(7294),t(3905)),a=t(2004);const r={},l="Basic Configuration",s={unversionedId:"metaflow/configuring-flows/basic-configuration",id:"metaflow/configuring-flows/basic-configuration",title:"Basic Configuration",description:"You can find all Config examples in this repository.",source:"@site/docs/metaflow/configuring-flows/basic-configuration.md",sourceDirName:"metaflow/configuring-flows",slug:"/metaflow/configuring-flows/basic-configuration",permalink:"/metaflow/configuring-flows/basic-configuration",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/configuring-flows/basic-configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Configuring Flows",permalink:"/metaflow/configuring-flows/introduction"},next:{title:"Parsing Configs",permalink:"/metaflow/configuring-flows/parsing-configs"}},p={},c=[{value:"Accessing config keys",id:"accessing-config-keys",level:3},{value:"Defining config files",id:"defining-config-files",level:3},{value:"Running remotely",id:"running-remotely",level:3},{value:"Configuring flow-level decorators",id:"configuring-flow-level-decorators",level:2},{value:"Deploying configs to production",id:"deploying-configs-to-production",level:2},{value:"Mixing <code>Config</code>s and <code>Parameter</code>s",id:"mixing-configs-and-parameters",level:2}],f={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,o.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"basic-configuration"},"Basic Configuration"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"You can find ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/config-examples"},"all ",(0,i.kt)("inlineCode",{parentName:"a"},"Config")," examples in this repository"),".")),(0,i.kt)("p",null,"Let's start with a simple example that reads a JSON config file and uses it\nto configure ",(0,i.kt)("inlineCode",{parentName:"p"},"@timeout")," for the start step:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import time\nfrom metaflow import FlowSpec, step, Config, timeout\n\nclass TimeoutConfigFlow(FlowSpec):\n    config = Config("config", default="myconfig.json")\n\n    @timeout(seconds=config.timeout)\n    @step\n    def start(self):\n        print(f"timing out after {self.config.timeout} seconds")\n        time.sleep(7)\n        print("success")\n        self.next(self.end)\n\n    @step\n    def end(self):\n        print("full config", self.config)\n\nif __name__ == "__main__":\n    TimeoutConfigFlow()\n')),(0,i.kt)("p",null,"Save the flow as ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout_config.py")," and create a small config file, ",(0,i.kt)("inlineCode",{parentName:"p"},"myconfig.json"),", in the same directory\nwith contents like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{"timeout": 5}\n')),(0,i.kt)("p",null,"You can run the flow as usual:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python timeout_config.py run\n")),(0,i.kt)("p",null,"The flow should fail, as the step takes longer than 5 seconds to execute. To make the flow succeed, increase\nthe timeout value in the config file to ",(0,i.kt)("inlineCode",{parentName:"p"},"10")," and re-run the flow."),(0,i.kt)("h3",{id:"accessing-config-keys"},"Accessing config keys"),(0,i.kt)("p",null,"As shown above, you can use values from the config to parametrize decorators: Just refer to the config name\nand a key in the config with a dot notation, as in ",(0,i.kt)("inlineCode",{parentName:"p"},"@timeout(seconds=config.timeout)"),". Since decorators\nexist outside the methods, you don't need to refer to ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," when using configs in decorators. Flow-level\ndecorators like ",(0,i.kt)("inlineCode",{parentName:"p"},"@schedule")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"@trigger")," need a different style, which is covered below."),(0,i.kt)("p",null,"When using configs inside methods, they behave like any other artifacts as shows by the ",(0,i.kt)("inlineCode",{parentName:"p"},"print"),"\nstatement referring to ",(0,i.kt)("inlineCode",{parentName:"p"},"self.config.timeout"),". You can treat configs as dictionaries or JSON objects,\nalthough inside the flow they are wrapped in ",(0,i.kt)("a",{parentName:"p",href:"#"},"a ",(0,i.kt)("inlineCode",{parentName:"a"},"ConfigValue")," object")," that allows you to use the dot\nnotation to refer to its keys. Note that config artifacts are read-only, similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s."),(0,i.kt)("p",null,"If you want to inspect a config of a previous run, you can use the Client API to fetch the corresponding\nartifact. You can try this e.g. in a notebook:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"Flow('TimeoutConfigFlow').latest_run.data.config\n")),(0,i.kt)("p",null,"This will output a dictionary, ",(0,i.kt)("inlineCode",{parentName:"p"},"{'timeout': 5}"),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Regardless of their original format, configs are parsed and used as nested dictionaries.\nIf you want to use the dot notation to access keys, ensure that your keys are valid\nPython identifiers, i.e. they contain only alphanumberic characters and underscores. Otherwise\nyou can access keys using the usual square brackets, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"config['my special value!']"),".")),(0,i.kt)("h3",{id:"defining-config-files"},"Defining config files"),(0,i.kt)("p",null,"In the above example, the config was read from the default config file, ",(0,i.kt)("inlineCode",{parentName:"p"},"myconfig.json"),". You\ncan define another config file, say ",(0,i.kt)("inlineCode",{parentName:"p"},"myconfig2.json"),", on the command line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python timeout_config.py --config config myconfig2.json run\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," option comes before ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," as it affects all commands, not just ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),". It takes\ntwo options: The name of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," to disambiguate between multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"s in a flow\nand the corresponding config file."),(0,i.kt)("p",null,"Instead of a file, you can pass the full config on the command line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python timeout_config.py --config-value config '{\"timeout\": 3}' run\n")),(0,i.kt)("p",null,"It is a good idea to use single quotes around the config value, to prevent the shell from\ntrying to parse the value. You can define multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"--config-value")," options if\nyou have multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"s in your flow."),(0,i.kt)("p",null,"Alternatively, you can define the options through environment variables, ",(0,i.kt)("inlineCode",{parentName:"p"},"METAFLOW_FLOW_CONFIG")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"METAFLOW_FLOW_CONFIG_VALUE"),",\nwhich take a JSON object as their value, mapping config names to their values. For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'METAFLOW_FLOW_CONFIG_VALUE=\'{"config": {"timeout": 3}}\' python timeout_config.py run\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If your application needs multiple, hierarchical config files, you can use a configuration\nmanagement system like ",(0,i.kt)("a",{parentName:"p",href:"https://omegaconf.readthedocs.io/"},"OmegaConf")," or ",(0,i.kt)("a",{parentName:"p",href:"https://hydra.cc"},"Hydra"),"\nto prepare them for Metaflow. See ",(0,i.kt)("a",{parentName:"p",href:"parsing-configs"},"Parsing Configs")," and ",(0,i.kt)("a",{parentName:"p",href:"config-driven-experimentation"},"Config-Driven Experimentation")," for examples.")),(0,i.kt)("h3",{id:"running-remotely"},"Running remotely"),(0,i.kt)("p",null,"If you have configured ",(0,i.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/introduction"},"a remote compute backend for Metaflow"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"@batch")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"@kubernetes"),", you can run the example remotely as usual. For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python timeout_config.py --config config myconfig2.json run --with kubernetes\n")),(0,i.kt)("p",null,"Notably the config files are evaluated and included prior to executing anything remotely, so\nno extra effort is needed in packaging the configs together with the code."),(0,i.kt)("h2",{id:"configuring-flow-level-decorators"},"Configuring flow-level decorators"),(0,i.kt)("p",null,"Consider this example that configures its ",(0,i.kt)("a",{parentName:"p",href:"/scaling/dependencies/libraries"},"software dependencies via ",(0,i.kt)("inlineCode",{parentName:"a"},"@pypi_base")),"\nand ",(0,i.kt)("a",{parentName:"p",href:"/production/event-triggering"},"a ",(0,i.kt)("inlineCode",{parentName:"a"},"@trigger")," policy")," via a ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowSpec, step, Config, trigger, pypi_base,\\\n                     config_expr, card, current\nfrom metaflow.cards import Table\n\n@pypi_base(packages=config_expr("config.packages"))\n@trigger(event=config_expr("config.event"))\nclass TopLevelConfigFlow(FlowSpec):\n\n    config = Config("config", default="myconfig.json")\n\n    @step\n    def start(self):\n        import pandas as pd\n        self.df = pd.DataFrame({"col": ["first", "second", "third"]})\n        self.next(self.end)\n\n    @card\n    @step\n    def end(self):\n        print("outputing dataframe", self.df)\n        current.card.append(Table.from_dataframe(self.df))\n\nif __name__ == "__main__":\n    TopLevelConfigFlow()\n')),(0,i.kt)("p",null,"The corresponding config file, ",(0,i.kt)("inlineCode",{parentName:"p"},"myconfig.json")," can look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "event": "some_custom_event",\n    "packages": {\n        "pandas": "2.2.3",\n        "pyarrow": "18.1.0"\n    }\n}\n')),(0,i.kt)("p",null,"Python's variable visibility rules prevent the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," variable defined within the flow from being\naccessible outside of it. Hence, outside the flow we must refer to configs indirectly through\n",(0,i.kt)("a",{parentName:"p",href:"#"},"the ",(0,i.kt)("inlineCode",{parentName:"a"},"config_expr")," utility")," which wraps the dot notation for late evaluation."),(0,i.kt)("p",null,"Other than this detail, the configs work the same way. You can run the example, taking into account\nthat it will install dependencies on the fly with ",(0,i.kt)("inlineCode",{parentName:"p"},"--environment=pypi"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python toplevel.py --environment=pypi run\n")),(0,i.kt)("h2",{id:"deploying-configs-to-production"},"Deploying configs to production"),(0,i.kt)("p",null,"To see configurable ",(0,i.kt)("inlineCode",{parentName:"p"},"@trigger"),"s in action, you can ",(0,i.kt)("a",{parentName:"p",href:"/production/scheduling-metaflow-flows/scheduling-with-argo-workflows"},"deploy the above example to Argo Workflows"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python toplevel.py --environment=pypi argo-workflows create\n")),(0,i.kt)("p",null,"Configs are evaluated and snapshot during the deployment, as this command executes. Changes in config files\nwon't affect any existing deployment. Also all the decorator values become fixed at this point, allowing\nthe deployment to execute as per defined in the configs."),(0,i.kt)("p",null,"Use ",(0,i.kt)("a",{parentName:"p",href:"/metaflow/client"},"the Client API")," to inspect configs attached to existing production runs."),(0,i.kt)("h2",{id:"mixing-configs-and-parameters"},"Mixing ",(0,i.kt)("inlineCode",{parentName:"h2"},"Config"),"s and ",(0,i.kt)("inlineCode",{parentName:"h2"},"Parameter"),"s"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction#introducing-config"},"As outlined in the introduction"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"s and\n",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s serve different roles in flows - they can happily co-exist. Since ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"s are evaluated\nbefore ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s, you can use them to set defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s, as exemplified here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import time\nfrom metaflow import FlowSpec, step, card, current, Config, Parameter, config_expr\nfrom metaflow.cards import Image\n\nBASE = "https://picsum.photos/id"\n\nclass ConfigurablePhotoFlow(FlowSpec):\n    cfg = Config("config", default="photo_config.json")\n    id = Parameter("id", default=cfg.id)\n    size = Parameter("size", default=cfg.size)\n\n    @card\n    @step\n    def start(self):\n        import requests\n\n        params = {k: v for k, v in self.cfg.style.items() if v}\n        self.url = f"{BASE}/{self.id}/{self.size}/{self.size}"\n        img = requests.get(self.url, params)\n        current.card.append(Image(img.content))\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\n\nif __name__ == "__main__":\n    ConfigurablePhotoFlow()\n')),(0,i.kt)("p",null,"The corresponding config, ",(0,i.kt)("inlineCode",{parentName:"p"},"photo_config.json")," looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n    "id": 1084,\n    "size": 400,\n    "style": {\n        "grayscale": true,\n        "blur": 2\n    }\n}\n')),(0,i.kt)("p",null,"In this case, we use the config to define how our application should behave - all photos should\nbe slightly ",(0,i.kt)("inlineCode",{parentName:"p"},"blur"),"'red and ",(0,i.kt)("inlineCode",{parentName:"p"},"grayscale")," - but the user is able to pick a photo ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and determine its\n",(0,i.kt)("inlineCode",{parentName:"p"},"size"),". "),(0,i.kt)("p",null,"When you are testing the flow locally, you can adjust both ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),"s and ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s easily like here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'python photo_config.py \\\n   --config-value config \'{"id": 1, "size": 1, "style": {"grayscale": false, "blur": 0}}\' \\\n   run --id 50 --size 600\n')),(0,i.kt)("p",null,"In this case, the config defines defaults for the two ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s, ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),", which we then\nset on the command line. You can see the photo ",(0,i.kt)("a",{parentName:"p",href:"/metaflow/visualizing-results/effortless-task-inspection-with-default-cards"},"included in a ",(0,i.kt)("inlineCode",{parentName:"a"},"@card")),"\nwith"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python photo_config.py card view start  \n")),(0,i.kt)("p",null,"When you deploy the flow to production, the difference between ",(0,i.kt)("inlineCode",{parentName:"p"},"Config")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter")," becomes clear:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python photo_config.py argo-workflows create\n")),(0,i.kt)("p",null,"You can now start a production run, either through the CLI or on the UI, but you can only change ",(0,i.kt)("inlineCode",{parentName:"p"},"Parameter"),"s,\nhere ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),", nothing in the deployment-time ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),", as shown in this screencast:"),(0,i.kt)(a.Z,{controls:!0,muted:!0,playsinline:!0,url:"/assets/configurable-photo.mp4",width:"100%",height:"100%",mdxType:"ReactPlayer"}))}d.isMDXComponent=!0}}]);