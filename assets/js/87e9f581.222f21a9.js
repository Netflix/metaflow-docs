"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4576],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return a?n.createElement(h,i(i({ref:t},d),{},{components:a})):n.createElement(h,i({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2068:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={},i="Advanced, Shareable Cards with Card Templates",l={unversionedId:"metaflow/visualizing-results/advanced-shareable-cards-with-card-templates",id:"metaflow/visualizing-results/advanced-shareable-cards-with-card-templates",title:"Advanced, Shareable Cards with Card Templates",description:"The built-in Card Components allow you to",source:"@site/docs/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates.md",sourceDirName:"metaflow/visualizing-results",slug:"/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates",permalink:"/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates",draft:!1,editUrl:"https://github.dev/Netflix/metaflow-docs/blob/master/docs/metaflow/visualizing-results/advanced-shareable-cards-with-card-templates.md",tags:[],version:"current",frontMatter:{},sidebar:"python",previous:{title:"Updating Cards During Task Execution",permalink:"/metaflow/visualizing-results/dynamic-cards"},next:{title:"Configuring Flows",permalink:"/metaflow/configuring-flows/introduction"}},s={},p=[{value:"Using a Card Template",id:"using-a-card-template",level:2},{value:"Developing a static Card Template",id:"developing-a-static-card-template",level:2},{value:"Developing a dynamic Card Template",id:"developing-a-dynamic-card-template",level:2},{value:"Managing dependencies in Card Templates",id:"managing-dependencies-in-card-templates",level:2}],d={toc:p};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"advanced-shareable-cards-with-card-templates"},"Advanced, Shareable Cards with Card Templates"),(0,r.kt)("p",null,"The built-in ",(0,r.kt)("a",{parentName:"p",href:"easy-custom-reports-with-card-components"},(0,r.kt)("em",{parentName:"a"},"Card Components"))," allow you to\ncreate a visual report with a few lines of Python code. This is by far the easiest way\nto output visualizations using Metaflow\u2019s default visual style and layout."),(0,r.kt)("p",null,"This section describes a more advanced concept of ",(0,r.kt)("em",{parentName:"p"},"Card Templates")," which are more\nflexible than ",(0,r.kt)("a",{parentName:"p",href:"effortless-task-inspection-with-default-cards"},(0,r.kt)("em",{parentName:"a"},"Default Cards"))," and Card\nComponents, but they require more upfront effort to create. However, using an existing\nCard Template is very easy, as shown below. They are a good match for use cases such as"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using off-the-shelf Javascript libraries to create advanced visualizations."),(0,r.kt)("li",{parentName:"ul"},"Creating fully customized reports with any visual style and layout."),(0,r.kt)("li",{parentName:"ul"},"Creating a project-specific card template."),(0,r.kt)("li",{parentName:"ul"},"Sharing generally useful card templates publicly.")),(0,r.kt)("p",null,"For instance, if your project involves extracting features from video, you can create a\ncard template that shows metadata, frames from the video, and a sample of features in a\npredefined format. Everyone working on the project can use the same card template to\nmake it easy to catalogue and compare various approaches."),(0,r.kt)("h2",{id:"using-a-card-template"},"Using a Card Template"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"Card Template")," is a normal Python package, hosted in a Git repository of its own,\noptionally published to a private or public package repository. By convention, public\nCard Templates have a ",(0,r.kt)("inlineCode",{parentName:"p"},"metaflow-card")," prefix, so you can easily ",(0,r.kt)("a",{parentName:"p",href:"https://pypi.org/search/?q=metaflow-card-&o="},"find public card\ntemplates on PyPi"),"."),(0,r.kt)("p",null,"Let\u2019s start with a simple starter template,\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/metaflow-card-html"},"metaflow-card-html"),", which simply\nconverts HTML stored in an artifact to a static non-updating card."),(0,r.kt)("p",null,"First, install the template using ",(0,r.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pip install metaflow-card-html\n")),(0,r.kt)("p",null,"Now we can use the card in any flow by adding a decorator, ",(0,r.kt)("inlineCode",{parentName:"p"},"@card(type=\u2019html\u2019)"),". The\ntype attribute refers to the template name. Let\u2019s test it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow import FlowSpec, step, card\n\nclass HtmlCardFlow(FlowSpec):\n\n    @card(type=\'html\')\n    @step\n    def start(self):\n        self.html = """\n        <html>\n          <body style=\'color: blue\'>\n            Hello World!\n          </body>\n        </html>\n        """\n        self.next(self.end)\n\n    @step\n    def end(self):\n        pass\n\nif __name__ == "__main__":\n    HtmlCardFlow()\n')),(0,r.kt)("p",null,"Note that this is a basic example of a custom template. Other custom\ntemplates don't require writing HTML by hand. Save the flow in ",(0,r.kt)("inlineCode",{parentName:"p"},"htmlcardflow.py"),". Then,\nyou can run it"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python htmlcardflow.py run\n")),(0,r.kt)("p",null,"and view the card"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python htmlcardflow.py card view start\n")),(0,r.kt)("p",null,"You should see a blank page with a blue \u201cHello World!\u201d text."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(292).Z,width:"563",height:"158"})),(0,r.kt)("p",null,"A particularly useful feature of card templates is that they work in any compute\nenvironment, even when ",(0,r.kt)("a",{parentName:"p",href:"/scaling/remote-tasks/requesting-resources"},"executing tasks remotely"),".\nFor instance, if you have AWS Batch set up, you can run the flow as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python htmlcardflow.py run --with batch\n")),(0,r.kt)("p",null,"The card will get produced without you having to worry about installing anything on the\nremote instances! You can ",(0,r.kt)("a",{parentName:"p",href:"../../production/scheduling-metaflow-flows/introduction/"},"deploy flows to\nproduction")," with custom\ntemplates too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python htmlcardflow.py step-functions create\n")),(0,r.kt)("p",null,"Now, every time a production run executes, cards will get produced exactly as during\nprototyping. Behind the scenes, Metaflow takes care of packaging any card templates\nwhenever you execute code remotely."),(0,r.kt)("h2",{id:"developing-a-static-card-template"},"Developing a static Card Template"),(0,r.kt)("p",null,"If you want to develop a card template of your own, it is useful to have a mental model\nof how cards work under the hood. Let's start with internals of a static, non-updating card:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(9832).Z,width:"561",height:"312"})),(0,r.kt)("p",null,"The blue box is a Metaflow task executing a step from the user\u2019s flow. It is decorated\nwith a ",(0,r.kt)("inlineCode",{parentName:"p"},"@card")," decorator that has a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," attribute referring to your custom template,\ne.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"mycard"),". The task executes before the card template. After the task has finished,\na new subprocess is started that executes a card template. This ensures that even if\nthe template fails for any reason, it won\u2019t crash the task."),(0,r.kt)("p",null,"The card template is given the Task ID of the task that the card corresponds to. Using\nthis Task ID, the template can use ",(0,r.kt)("a",{parentName:"p",href:"../client"},"the Client API")," to query any information\nabout the task, its parent run, and any past runs. Using this information, the template\nneeds to output a single stand-alone HTML file - the actual card. Note that the HTML\nfile can\u2019t depend on any other local files. In particular, you must include any images\nas ",(0,r.kt)("a",{parentName:"p",href:"https://css-tricks.com/data-uris/"},"Data URIs")," in the file itself."),(0,r.kt)("p",null,"The template itself is a Python class, derived from ",(0,r.kt)("em",{parentName:"p"},"MetaflowCard"),", which needs to\nimplement one method, ",(0,r.kt)("em",{parentName:"p"},"render"),", which is given ",(0,r.kt)("a",{parentName:"p",href:"../client"},"a Task object from the Client\nAPI")," - see ",(0,r.kt)("a",{parentName:"p",href:"/api/cards#defining-a-custom-card"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"MetaflowCard")," API\nreference")," for details."),(0,r.kt)("p",null,"This is the complete implementation of the ",(0,r.kt)("inlineCode",{parentName:"p"},"@card(type='html')")," which we used above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from metaflow.cards import MetaflowCard\n\nclass HTMLCard(MetaflowCard):\n\n    type = \'html\'\n\n    def __init__(self, options={"artifact":"html"}, **kwargs):\n        self._attr_nm = options.get("artifact", "html")\n\n    def render(self, task):\n        if self._attr_nm in task:\n            return str(task[self._attr_nm].data)\n\nCARDS = [HTMLCard]\n')),(0,r.kt)("p",null,"The example above used the default ",(0,r.kt)("inlineCode",{parentName:"p"},"self.html")," artifact to pass HTML code to the\ntemplate. You can choose another artifact by specifying an artifact name in the\n",(0,r.kt)("em",{parentName:"p"},"options")," dictionary that is passed to the template: ",(0,r.kt)("inlineCode",{parentName:"p"},"@card(type='html',\noptions={'artifact': 'other_html')"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can read card options from a config file, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"@card(options=config.card_options)"),"\nLearn more in ",(0,r.kt)("a",{parentName:"p",href:"/metaflow/configuring-flows/introduction"},"Configuring Flows"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"render")," method needs to return a self-contained HTML as a string. This template has\nit easy, since all it has to do is to return the user-defined artifact. Other templates\ncan do much more complex processing to produce a suitable HTML page."),(0,r.kt)("p",null,"To implement and publish a template of your own, take a look at the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/metaflow-card-html/"},"metaflow-card-html")," repository\nwhich shows how to structure the package, as well as step-by-step instructions on\nhow to create one of your own. If you create a Card Template that other people might\nbenefit from, let our ",(0,r.kt)("a",{parentName:"p",href:"http://slack.outerbounds.co"},"Slack community")," know about it!"),(0,r.kt)("h2",{id:"developing-a-dynamic-card-template"},"Developing a dynamic Card Template"),(0,r.kt)("p",null,"Dynamic cards, aka cards that update during task execution, extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetaflowCard"),"\nclass presented above with two new methods: ",(0,r.kt)("inlineCode",{parentName:"p"},"render_runtime")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"render_runtime")," is called periodically during task execution. It\nis a close cousin of the ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," method that produces the\nfinal card HTML. ",(0,r.kt)("inlineCode",{parentName:"p"},"render_runtime")," produces a card HTML as well, but it doesn't\nhave access to artifacts produced by the currently executing ",(0,r.kt)("inlineCode",{parentName:"p"},"Task")," as they\nare only available upon task completion. Instead, ",(0,r.kt)("inlineCode",{parentName:"p"},"render_runtime")," produces\nthe HTML based on a data object that is passed to it by the user via the\n",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," method."),(0,r.kt)("p",null,"Calling ",(0,r.kt)("inlineCode",{parentName:"p"},"render_runtime")," to re-render the whole HTML every time e.g. a progress\nbar updates would be excessive. Instead, small intermediate updates that don't\nchange the page layout are handled by a ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," method in ",(0,r.kt)("inlineCode",{parentName:"p"},"MetaflowCard"),", which\nsimply converts data passed to it via the task-side ",(0,r.kt)("inlineCode",{parentName:"p"},"refresh")," method\ninto a JSON object, which is then sent to the card."),(0,r.kt)("p",null,"To update the card content on the client side, the viewer calls a function\n",(0,r.kt)("inlineCode",{parentName:"p"},"metaflow_card_update")," in Javascript, which is responsible for updating the\ncard's contents (e.g. moving a progress bar) based on the data it receives."),(0,r.kt)("p",null,"The following schematic illustrates the process:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(3286).Z,width:"800",height:"600"})),(0,r.kt)("p",null,"If you want to develop a dynamic Card Template of your own, you can ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/metaflow-card-scatter3d/tree/main"},"use\n",(0,r.kt)("inlineCode",{parentName:"a"},"metaflow-card-scatter3d")," as a\nstarter template"),".\nSee ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/outerbounds/dynamic-card-examples/tree/main/custom-card"},(0,r.kt)("inlineCode",{parentName:"a"},"ScatterFlow")),"\nfor an example how to use the custom card. Also don't hesitate to contact\n",(0,r.kt)("a",{parentName:"p",href:"http://slack.outerbounds.co"},"Metaflow Slack")," for advice."),(0,r.kt)("h2",{id:"managing-dependencies-in-card-templates"},"Managing dependencies in Card Templates"),(0,r.kt)("p",null,"Card templates may rely on 3rd party libraries for their functionality, say, to produce\nadvanced visualizations. To make sure the card can be rendered in remote environments\nthat might not have all dependencies already installed, Metaflow takes care of packaging\nany files included directly in the template itself. However, it can\u2019t handle 3rd party\ndependencies automatically. Hence, to make sure your template works without friction,\nyou need to pay attention to its dependencies."),(0,r.kt)("p",null,"Here are recommended strategies for handling 3rd party library dependencies in card\ntemplates:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"You can rely on Javascript libraries to move functionality to the frontend side. For\ninstance, instead of producing visualizations in Python, you can produce them in\nJavascript. Take a look at\n",(0,r.kt)("a",{parentName:"li",href:"https://github.com/outerbounds/metaflow-card-uplot-timeseries"},"metaflow-card-uplot-timeseries"),"\ntemplate to see how to use a Javascript library in your template."),(0,r.kt)("li",{parentName:"ol"},"You can include small Python libraries in the template package itself, aka ",(0,r.kt)("em",{parentName:"li"},"vendor"),"\nthem.")),(0,r.kt)("p",null,"If these approaches don\u2019t work, you can instruct users to include the dependencies of\nthe template in their ",(0,r.kt)("a",{parentName:"p",href:"/scaling/dependencies"},(0,r.kt)("inlineCode",{parentName:"a"},"@conda")," or ",(0,r.kt)("inlineCode",{parentName:"a"},"@pypi")," libraries"),". For\ntemplates shared privately, you may also rely on dependencies included in a common\nDocker image."))}c.isMDXComponent=!0},292:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-html_(2)-8bab234a69b91c4a9fc410eb4ef25a40.png"},9832:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/card-docs-template_(1)-c41351e9f091400f1151a1c5d7baaebe.png"},3286:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/rtcard-arch-32e44e316fdb24d38775d525ca7adc58.png"}}]);